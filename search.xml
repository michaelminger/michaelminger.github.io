<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络爬虫——超级鹰源码下载</title>
      <link href="/2020/04/27/wang-luo-pa-chong-chao-ji-ying-yuan-ma-xia-zai/"/>
      <url>/2020/04/27/wang-luo-pa-chong-chao-ji-ying-yuan-ma-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——超级鹰源码下载"><a href="#网络爬虫——超级鹰源码下载" class="headerlink" title="网络爬虫——超级鹰源码下载"></a>网络爬虫——超级鹰源码下载</h2><p>超级鹰官方网址：<a href="https://www.chaojiying.com/" target="_blank" rel="noopener">https://www.chaojiying.com/</a><br><img src="https://img-blog.csdnimg.cn/20200510100745760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200510100745748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200510100745748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将文件下载再解压，这里使用源码：<br><img src="https://img-blog.csdnimg.cn/20200510100952775.jpg#pic_center" alt="在这里插入图片描述"></p><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><pre class="line-numbers language-py"><code class="language-py">#!/usr/bin/env python# coding:utf-8import requestsfrom hashlib import md5class Chaojiying_Client(object):    def __init__(self, username, password, soft_id):        self.username = username        password =  password.encode('utf8')        self.password = md5(password).hexdigest()        self.soft_id = soft_id        self.base_params = {            'user': self.username,            'pass2': self.password,            'softid': self.soft_id,        }        self.headers = {            'Connection': 'Keep-Alive',            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)',        }    def PostPic(self, im, codetype):        """        im: 图片字节        codetype: 题目类型 参考 http://www.chaojiying.com/price.html        """        params = {            'codetype': codetype,        }        params.update(self.base_params)        files = {'userfile': ('ccc.jpg', im)}        r = requests.post('http://upload.chaojiying.net/Upload/Processing.php', data=params, files=files, headers=self.headers)        return r.json()    def ReportError(self, im_id):        """        im_id:报错题目的图片ID        """        params = {            'id': im_id,        }        params.update(self.base_params)        r = requests.post('http://upload.chaojiying.net/Upload/ReportError.php', data=params, headers=self.headers)        return r.json()if __name__ == '__main__':    chaojiying = Chaojiying_Client('超级鹰用户名', '超级鹰用户名的密码', '96001')    #用户中心>>软件ID 生成一个替换 96001    im = open('a.jpg', 'rb').read()                                                    #本地图片文件路径 来替换 a.jpg 有时WIN系统须要//    print chaojiying.PostPic(im, 1902)                                                #1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="a-jpg-为自己目标图片"><a href="#a-jpg-为自己目标图片" class="headerlink" title="a.jpg 为自己目标图片"></a>a.jpg 为自己目标图片</h6></li><li><h6 id="超级鹰用户名及密码。需要自己去官网注册使用。"><a href="#超级鹰用户名及密码。需要自己去官网注册使用。" class="headerlink" title="超级鹰用户名及密码。需要自己去官网注册使用。"></a>超级鹰用户名及密码。需要自己去官网注册使用。</h6></li></ul><p>具体使用方法到我的后继博客中查找。</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超级鹰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编题——CJNE</title>
      <link href="/2020/02/20/hui-bian-ti-cjne/"/>
      <url>/2020/02/20/hui-bian-ti-cjne/</url>
      
        <content type="html"><![CDATA[<h2 id="汇编题——CJNE"><a href="#汇编题——CJNE" class="headerlink" title="汇编题——CJNE"></a>汇编题——CJNE</h2><p><img src="https://img-blog.csdnimg.cn/20200423220905984.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CJNE </tag>
            
            <tag> DJNE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——前程无忧网数据获取及存储（高级）</title>
      <link href="/2019/09/03/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-cun-chu-gao-ji/"/>
      <url>/2019/09/03/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-cun-chu-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——前程无忧网数据获取及存储（高级）"><a href="#网络爬虫——前程无忧网数据获取及存储（高级）" class="headerlink" title="网络爬虫——前程无忧网数据获取及存储（高级）"></a>网络爬虫——前程无忧网数据获取及存储（高级）</h2><p>实验内容1<br>目标网站：前程无忧招聘网</p><p>目标网址：<a href="https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html" target="_blank" rel="noopener">https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html</a></p><p>目标数据：（1）职位名（2）公司名（3）工作地点（4）薪资 （5）发布时间</p><p><img src="https://img-blog.csdnimg.cn/20200413221530218.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>要求</p><p>（1）使用urllib或requests库实现该网站网页源代码的获取，并将源代码进行保存；</p><p>（2）自主选择re、bs4、lxml中的一种解析方法对保存的的源代码读取并进行解析，成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据保存到txt，csv文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreedef getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def parsePage(html):    ulist = []    clist = []    rlist = []    newhtml =etree.HTML(html,etree.HTMLParser())    result=newhtml.xpath('//*[@id="resultList"]/div[@class="el"]//text()')    for i in range(len(result)):        ulist.append(result[i].replace(" ","").replace('\r',"").replace("\n",''))    while '' in ulist:        ulist.remove('')    length = len(ulist)    weight = int(length / 5 )    for i in range(weight):        for j in range(5):            clist.append(ulist[i*5+j])        rlist.append(clist)        clist = []    return rlist# def txtdata(data):#     with open('top20.txt','w')as file:#         for i in data:#             for j in i:#                 print(j)#         print('successful')def storedata(data):    with open('top20.txt','w',encoding = 'utf-8')as file:        for i in data:            file.write(json.dumps(i,ensure_ascii=False)+'\n')        print('ok')def csvdata(data):    with open('top20.csv','w',encoding = 'utf-8',newline='')as csvfile:        fieldnames = ['职位名','公司名','工作地点','薪资','工作时间']        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({'职位名':i[0],'公司名':i[1],'工作地点':i[2],'薪资':i[3],'工作时间':i[4]})        print('ok')def main():    url="https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html"    html=getHtmlText(url)    rlist=parsePage(html)#     txtdata(data)    storedata(rlist)    csvdata(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h3><p><img src="https://img-blog.csdnimg.cn/20200413222149472.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200413222120905.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200413222132312.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSV </tag>
            
            <tag> Xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫常见问题汇总</title>
      <link href="/2019/06/02/wang-luo-pa-chong-chang-jian-wen-ti-hui-zong/"/>
      <url>/2019/06/02/wang-luo-pa-chong-chang-jian-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫常见问题汇总"><a href="#网络爬虫常见问题汇总" class="headerlink" title="网络爬虫常见问题汇总"></a>网络爬虫常见问题汇总</h2><h3 id="问题一：使用requests库或者urllib库获取源代码时无法正常显示中文"><a href="#问题一：使用requests库或者urllib库获取源代码时无法正常显示中文" class="headerlink" title="问题一：使用requests库或者urllib库获取源代码时无法正常显示中文"></a>问题一：使用requests库或者urllib库获取源代码时无法正常显示中文</h3><p>解决方法：</p><p>（1）requests库的文本中有两种类型，一种是文本类型，使用text属性，一种是针对音频、视频、图片等二进制数据类型，使用content属性；一般返回的是text属性时会出现中文乱码现象，因此在输出返回之前需要显示的修改属性encoding，将其赋值为“utf-8”或者是apparent_encoding即可。</p><p>（2）urllib库的文本只有一种就是使用read()方法进行读取。因此要解决中文问题，一定要在读取后加入.decode(“utf-8”)，进行显示的转码之后便不会出现乱码问题了。</p><h3 id="问题二：文本节点"><a href="#问题二：文本节点" class="headerlink" title="问题二：文本节点"></a>问题二：文本节点</h3><p>首先看两个HTML代码:</p><p>这是你眼中的HTML代码<br><img src="https://img-blog.csdnimg.cn/202004132128304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是计算机眼中的HTML代码:<br><img src="https://img-blog.csdnimg.cn/20200413212840829.png#pic_center" alt="在这里插入图片描述"><br>解决方法：</p><p> 在BS4中, 我们在HTML中看到的换行符以及空格都是NavigableString 也就是文本节点.</p><h3 id="问题三：滥用遍历文档树的方法"><a href="#问题三：滥用遍历文档树的方法" class="headerlink" title="问题三：滥用遍历文档树的方法"></a>问题三：滥用遍历文档树的方法</h3><p>常见的方法有:</p><blockquote><p>contents<br>descendants<br>parent<br>next_sibling<br>next_element</p></blockquote><p>这些方法都会遍历文档树中的所有节点, 包括文本节点. 也就是说: 只要你使用这些方法, 你就一定会选择出许多文本节点, 因为文本节点无处不在: 换行, 空格等.</p><p>解决方法：</p><p>使用过滤器find等方法:</p><p>soup.find(name=’tagname’)<br>当我们一旦在过滤器中指定了name关键字, 那么返回的结果就一定是tag对象, 因为文档节点没有name属性.</p><p>结论: 大多数情况下, 你需要的是find 这一类过滤器, 而不是遍历所有节点.</p><h3 id="问题四：html-parser"><a href="#问题四：html-parser" class="headerlink" title="问题四：html.parser"></a>问题四：html.parser</h3><p>html.parser是个令人又恨又爱的解析器, 它是Python内置的解析器, 开箱即用. 但是在一些情况下, 它解析出来的文档会丢失信息. </p><p>解决方法：</p><p>如果你发现你的文档信息缺少了, 那么试着换其他解析器,例如: lxml</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——前程无忧网数据获取及MYSQL存储</title>
      <link href="/2019/05/27/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-mysql-cun-chu/"/>
      <url>/2019/05/27/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-mysql-cun-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——前程无忧网数据获取及MYSQL存储"><a href="#网络爬虫——前程无忧网数据获取及MYSQL存储" class="headerlink" title="网络爬虫——前程无忧网数据获取及MYSQL存储"></a>网络爬虫——前程无忧网数据获取及MYSQL存储</h2><p>实验内容1<br>目标网站：前程无忧招聘网</p><p>目标网址：<a href="https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html" target="_blank" rel="noopener">https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html</a></p><p>目标数据：（1）职位名（2）公司名（3）工作地点（4）薪资 （5）发布时间</p><p><img src="https://img-blog.csdnimg.cn/20200413221530218.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>要求</p><p>（1）使用urllib或requests库实现该网站网页源代码的获取，并将源代码进行保存；</p><p>（2）自主选择re、bs4、lxml中的一种解析方法对保存的的源代码读取并进行解析，成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据保存到MYSQL库文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreeimport pymysql from PIL import Imageimport pytesseractimport traceback  def connectMysql():    return pymysql.connect(host='localhost',user='root',password='123456',port=3306,db='spiders')def createMysqlTable():    db = connectMysql()    cursor = db.cursor()# （1）职位名（2）公司名（3）工作地点（4）薪资 （5）发布时间    sql = 'create table if not exists proStr (\    职位名 varchar(255) not null ,\    公司名 varchar(255) not null,\    工作地点 varchar(255) not null,\    薪资 varchar(255) not null,\    发布时间 varchar(255) not null,\    primary key(职位名))'    cursor.execute(sql)    print('ok')    db.close()def getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def parsePage(html):    ulist = []    clist = []    rlist = []    ilist = []    newhtml =etree.HTML(html,etree.HTMLParser())    result=newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td//text()')    imgs = newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td/a/img/@src', stream=True)    j = 0     for img in imgs:        j=j+1        with open(str(j)+'.png', 'wb') as fd:            picture=requests.get(img).content            fd.write(picture)      for i in range(len(imgs)):              str_ = str(i+1)+'.png'            text = pytesseract.image_to_string(Image.open(str_))            ilist.append(text.replace(" ",".").replace("M","亿").replace("a","亿"))#     print(ilist)            for i in range(len(result)):        ulist.append(result[i].replace(" ","").replace('\r',"").replace("\n",''))    while '' in ulist:        ulist.remove('')    length = len(ulist)    weight = int(length / 8 )    for i in range(weight):        for j in range(8):            clist.append(ulist[i*8+j])        clist.append(ilist[i])        rlist.append(clist)        clist = []    return rlistdef mysqlData(datas):    table = 'movies'    keys = '名次,电影名称,日期,总场次,废场,人次,上座率,票价,票房'    db = connectMysql()    cursor = db.cursor()    for data in datas:        values = ','.join(['%s']*len(data))        sql = 'INSERT INTO {table}({keys}) VALUES({values})'.format(table=table,keys = keys ,values = values)        print(sql)        print(tuple(data))        try :            if cursor.execute(sql, tuple(data)):                print("Succcessful")                db.commit()        except:            traceback.print_exc()            print("Failed")            db.rollback()    db.close()def main():    createMysqlTable()    url="http://58921.com/daily/wangpiao"    html=getHtmlText(url)    rlist=parsePage(html)    mysqlData(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果输出效果："><a href="#结果输出效果：" class="headerlink" title="结果输出效果："></a>结果输出效果：</h3><p><img src="https://img-blog.csdnimg.cn/20200423213948381.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前程无忧 </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——二手房数据抓取及MYSQL存储</title>
      <link href="/2019/05/27/wang-luo-pa-chong-er-shou-fang-shu-ju-zhua-qu-ji-mysql-cun-chu/"/>
      <url>/2019/05/27/wang-luo-pa-chong-er-shou-fang-shu-ju-zhua-qu-ji-mysql-cun-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——二手房数据抓取及MYSQL存储"><a href="#网络爬虫——二手房数据抓取及MYSQL存储" class="headerlink" title="网络爬虫——二手房数据抓取及MYSQL存储"></a>网络爬虫——二手房数据抓取及MYSQL存储</h2><h4 id="目标网址："><a href="#目标网址：" class="headerlink" title="目标网址："></a>目标网址：</h4><p><a href="https://qd.anjuke.com/sale/jiaozhoushi/?from=SearchBar" target="_blank" rel="noopener">https://qd.anjuke.com/sale/jiaozhoushi/?from=SearchBar</a></p><h4 id="目标数据："><a href="#目标数据：" class="headerlink" title="目标数据："></a>目标数据：</h4><p> 标题 + 链接地址 + 厅室+ 面积+ 层数+建造时间 + 地址 + 单价（或总价）</p><p>要求：</p><p>（1）自选请求库和解析库获取目标数据；</p><p>（2）第一个存储至txt或者csv中，第二个源码存储至Mysql中。<br><img src="https://img-blog.csdnimg.cn/20200423220000472.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="源码（1）：csv-txt"><a href="#源码（1）：csv-txt" class="headerlink" title="源码（1）：csv,txt"></a>源码（1）：csv,txt</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreedef getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def cleanData(clist):    olist = []    for i in range(len(clist)):        olist.append(clist[i].replace(" ","").replace('\r',"").replace("\n",'').replace("\xa0\xa0",','))    return olistdef parsePage(html):    ulist = []    clist = []    newhtml =etree.HTML(html,etree.HTMLParser())    titles =cleanData(newhtml.xpath('//*[@id="houselist-mod-new"]/li/div[2]/div/a//text()'))    hrefs = cleanData(newhtml.xpath('//*[@id="houselist-mod-new"]/li/div[2]/div/a//@href', stream=True))    others =cleanData(newhtml.xpath('//*[@id="houselist-mod-new"]/li/div[2]/div[2]/span//text()'))    addresss =cleanData(newhtml.xpath('//*[@id="houselist-mod-new"]/li/div[2]/div[3]/span//text()'))    prices =cleanData(newhtml.xpath('//*[@id="houselist-mod-new"]/li/div[3]/span[2]//text()'))    length = len(titles)       for i in range(length):        ulist.append(titles[i])             ulist.append(hrefs[i])        ulist.append(others[i*4+0])        ulist.append(others[i*4+1])        ulist.append(others[i*4+2])        ulist.append(others[i*4+3])        ulist.append(addresss[i])        ulist.append(prices[i])        clist.append(ulist)        ulist = []    return clistdef txtdata(data):    with open('data.txt','w')as file:        for i in data:            for j in i:                print(j)        print('successful')def storedata(data):    with open('data.txt','w',encoding = 'utf-8')as file:        for i in data:            file.write(json.dumps(i,ensure_ascii=False)+'\n')        print('ok')def csvdata(data):     with open('data.csv','w',encoding = 'utf-8',newline='')as csvfile:        fieldnames = ['标题','链接地址','厅室','面积','层数','建造时间','地址','单价']        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({'标题':i[0],'链接地址':i[1],'厅室':i[2],'面积':i[3],'层数':i[4],'建造时间':i[5],'地址':i[6],'单价':i[7]})        print('ok')def main():    url="https://qd.anjuke.com/sale/jiaozhoushi/?from=SearchBar"    html=getHtmlText(url)    rlist=parsePage(html)    txtdata(rlist)    storedata(rlist)    csvdata(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码（1）：MYSQL"><a href="#源码（1）：MYSQL" class="headerlink" title="源码（1）：MYSQL"></a>源码（1）：MYSQL</h3><pre><code>import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreeimport pymysql import pytesseractimport traceback  def connectMysql():    return pymysql.connect(host=&#39;localhost&#39;,user=&#39;root&#39;,password=&#39;123456&#39;,port=3306,db=&#39;spiders&#39;)def createMysqlTable():    db = connectMysql()    cursor = db.cursor()    sql = &#39;create table if not exists data (\    标题 varchar(255) not null ,\    链接地址 varchar(255) not null ,\    厅室 varchar(255) not null,\    面积 varchar(255) not null,\    层数 varchar(255) not null,\    建造时间 varchar(255) not null,\    地址 varchar(255) not null,\    单价 varchar(255) not null,\    primary key(标题))&#39;    cursor.execute(sql)    print(&#39;ok&#39;)    db.close()def getHtmlText(url):    headers = {        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69&#39;            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return &quot;&quot;def cleanData(clist):    olist = []    for i in range(len(clist)):        olist.append(clist[i].replace(&quot; &quot;,&quot;&quot;).replace(&#39;\r&#39;,&quot;&quot;).replace(&quot;\n&quot;,&#39;&#39;).replace(&quot;\xa0\xa0&quot;,&#39;,&#39;))    return olistdef parsePage(html):    ulist = []    clist = []    newhtml =etree.HTML(html,etree.HTMLParser())    titles =cleanData(newhtml.xpath(&#39;//*[@id=&quot;houselist-mod-new&quot;]/li/div[2]/div/a//text()&#39;))    hrefs = cleanData(newhtml.xpath(&#39;//*[@id=&quot;houselist-mod-new&quot;]/li/div[2]/div/a//@href&#39;, stream=True))    others =cleanData(newhtml.xpath(&#39;//*[@id=&quot;houselist-mod-new&quot;]/li/div[2]/div[2]/span//text()&#39;))    addresss =cleanData(newhtml.xpath(&#39;//*[@id=&quot;houselist-mod-new&quot;]/li/div[2]/div[3]/span//text()&#39;))    prices =cleanData(newhtml.xpath(&#39;//*[@id=&quot;houselist-mod-new&quot;]/li/div[3]/span[2]//text()&#39;))    length = len(titles)       for i in range(length):        ulist.append(titles[i])             ulist.append(hrefs[i][0:100])        ulist.append(others[i*4+0])        ulist.append(others[i*4+1])        ulist.append(others[i*4+2])        ulist.append(others[i*4+3])        ulist.append(addresss[i])        ulist.append(prices[i])        clist.append(ulist)        ulist = []    return clistdef txtdata(data):    with open(&#39;data.txt&#39;,&#39;w&#39;)as file:        for i in data:            for j in i:                print(j)        print(&#39;successful&#39;)def storedata(data):    with open(&#39;data.txt&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;)as file:        for i in data:            file.write(json.dumps(i,ensure_ascii=False)+&#39;\n&#39;)        print(&#39;ok&#39;)def csvdata(data):     with open(&#39;data.csv&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;,newline=&#39;&#39;)as csvfile:        fieldnames = [&#39;标题&#39;,&#39;链接地址&#39;,&#39;厅室&#39;,&#39;面积&#39;,&#39;层数&#39;,&#39;建造时间&#39;,&#39;地址&#39;,&#39;单价&#39;]        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({&#39;标题&#39;:i[0],&#39;链接地址&#39;:i[1],&#39;厅室&#39;:i[2],&#39;面积&#39;:i[3],&#39;层数&#39;:i[4],&#39;建造时间&#39;:i[5],&#39;地址&#39;:i[6],&#39;单价&#39;:i[7]})        print(&#39;ok&#39;)def mysqlData(datas):    table = &#39;data&#39;    keys = &#39;标题,链接地址,厅室,面积,层数,建造时间,地址,单价&#39;    db = connectMysql()    cursor = db.cursor()    for data in datas:        values = &#39;,&#39;.join([&#39;%s&#39;]*len(data))        sql = &#39;INSERT INTO {table}({keys}) VALUES({values})&#39;.format(table=table,keys = keys ,values = values)        print(sql)        print(tuple(data))        try :            if cursor.execute(sql, tuple(data)):                print(&quot;Succcessful&quot;)                db.commit()        except:            traceback.print_exc()            print(&quot;Failed&quot;)            db.rollback()    db.close()def main():#     createMysqlTable()    url=&quot;https://qd.anjuke.com/sale/jiaozhoushi/?from=SearchBar&quot;    html=getHtmlText(url)    rlist=parsePage(html)#     txtdata(rlist)    storedata(rlist)    csvdata(rlist)    mysqlData(rlist)main()</code></pre><p><img src="https://img-blog.csdnimg.cn/20200423220435815.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423220435749.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423220435717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423220435486.jpg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> 二手房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——票房网数据抓取及存储（初级）</title>
      <link href="/2019/05/27/wang-luo-pa-chong-piao-fang-wang-shu-ju-zhua-qu-ji-cun-chu/"/>
      <url>/2019/05/27/wang-luo-pa-chong-piao-fang-wang-shu-ju-zhua-qu-ji-cun-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——票房网数据抓取及存储"><a href="#网络爬虫——票房网数据抓取及存储" class="headerlink" title="网络爬虫——票房网数据抓取及存储"></a>网络爬虫——票房网数据抓取及存储</h2><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>目标网站：电影票房网</p><p>目标网址：<a href="http://58921.com/daily/wangpiao" target="_blank" rel="noopener">http://58921.com/daily/wangpiao</a></p><h4 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h4><p>目标数据：（1）名次（2）电影名称 （3）日期（4）票房 （5）总场次（6）废场（7）人次（8）上座率（9）票价</p><p><img src="https://img-blog.csdnimg.cn/20200423214801795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>（1）使用urllib或requests库实现该网站网页源代码的获取，并将源代码进行保存；</p><p>（2）自主选择re、bs4、lxml中的一种解析方法对保存的的源代码读取并进行解析，成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据保存到csv文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreedef getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def parsePage(html):    ulist = []    clist = []    rlist = []    ilist = []    newhtml =etree.HTML(html,etree.HTMLParser())    result=newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td//text()')    imgs = newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td/a/img/@src', stream=True)    j = 0     for img in imgs:        j=j+1        with open(str(j)+'.png', 'wb') as fd:            picture=requests.get(img).content            fd.write(picture)      for i in range(len(imgs)):              str_ = str(i+1)+'.png'            text = pytesseract.image_to_string(Image.open(str_))            ilist.append(text.replace(" ",".").replace("M","亿").replace("a","亿"))#     print(ilist)            for i in range(len(result)):        ulist.append(result[i].replace(" ","").replace('\r',"").replace("\n",''))    while '' in ulist:        ulist.remove('')    length = len(ulist)    weight = int(length / 8 )    for i in range(weight):        for j in range(8):            clist.append(ulist[i*8+j])        clist.append(ilist[i])        rlist.append(clist)        clist = []    return rlist# def txtdata(data):#     with open('top20.txt','w')as file:#         for i in data:#             for j in i:#                 print(j)#         print('successful')def storedata(data):    with open('top20.txt','w',encoding = 'utf-8')as file:        for i in data:            file.write(json.dumps(i,ensure_ascii=False)+'\n')        print('ok')def csvdata(data):    with open('top20.csv','w',encoding = 'utf-8',newline='')as csvfile:        fieldnames = ['名次','电影名称','日期','票房','总场次','废场','人次','上座率','票价（元）']        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({'名次':i[0],'电影名称':i[1],'日期':i[2],'票房':i[8],'总场次':i[3],'废场':i[4],'人次':i[5],'上座率':i[6],'票价（元）':i[7]})        print('ok')def main():    url="http://58921.com/daily/wangpiao"    html=getHtmlText(url)    rlist=parsePage(html)#     txtdata(rlist)    storedata(rlist)    csvdata(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h3><p><img src="https://img-blog.csdnimg.cn/20200413222149472.jpg#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200423215045899.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423215045907.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 票房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——票房网数据抓取及MYSQL存储</title>
      <link href="/2019/05/27/wang-luo-pa-chong-piao-fang-wang-shu-ju-zhua-qu-ji-mysql-cun-chu/"/>
      <url>/2019/05/27/wang-luo-pa-chong-piao-fang-wang-shu-ju-zhua-qu-ji-mysql-cun-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——票房网数据抓取及MYSQL存储"><a href="#网络爬虫——票房网数据抓取及MYSQL存储" class="headerlink" title="网络爬虫——票房网数据抓取及MYSQL存储"></a>网络爬虫——票房网数据抓取及MYSQL存储</h2><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>目标网站：电影票房网</p><p>目标网址：<a href="http://58921.com/daily/wangpiao" target="_blank" rel="noopener">http://58921.com/daily/wangpiao</a></p><h4 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h4><p>目标数据：（1）名次（2）电影名称 （3）日期（4）票房 （5）总场次（6）废场（7）人次（8）上座率（9）票价<br><img src="https://img-blog.csdnimg.cn/20200423214801795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>要求</p><p>（1）使用urllib或requests库实现该网站网页源代码的获取，并将源代码进行保存；</p><p>（2）自主选择re、bs4、lxml中的一种解析方法对保存的的源代码读取并进行解析，成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据保存到MYSQL库文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreeimport pymysql from PIL import Imageimport pytesseractimport traceback  def connectMysql():    return pymysql.connect(host='localhost',user='root',password='123456',port=3306,db='spiders')def createMysqlTable():    db = connectMysql()    cursor = db.cursor()# fieldnames = ['名次','电影名称','日期','票房','总场次','废场','人次','上座率','票价']    sql = 'create table if not exists movies (\    名次 int not null ,\    电影名称 varchar(255) not null ,\    日期 varchar(255) not null,\    总场次 varchar(255) not null,\    废场 varchar(255) not null,\    人次 varchar(255) not null,\    上座率 varchar(255) not null,\    票价 varchar(255) not null,\    票房 varchar(255) not null,\    primary key(名次))'    cursor.execute(sql)    print('ok')    db.close()def getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def parsePage(html):    ulist = []    clist = []    rlist = []    ilist = []    newhtml =etree.HTML(html,etree.HTMLParser())    result=newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td//text()')    imgs = newhtml.xpath('//*[@id="content"]/div[2]/table/tbody/tr/td/a/img/@src', stream=True)    j = 0     for img in imgs:        j=j+1        with open(str(j)+'.png', 'wb') as fd:            picture=requests.get(img).content            fd.write(picture)      for i in range(len(imgs)):              str_ = str(i+1)+'.png'            text = pytesseract.image_to_string(Image.open(str_))            ilist.append(text.replace(" ",".").replace("M","亿").replace("a","亿"))#     print(ilist)            for i in range(len(result)):        ulist.append(result[i].replace(" ","").replace('\r',"").replace("\n",''))    while '' in ulist:        ulist.remove('')    length = len(ulist)    weight = int(length / 8 )    for i in range(weight):        for j in range(8):            clist.append(ulist[i*8+j])        clist.append(ilist[i])        rlist.append(clist)        clist = []    return rlistdef mysqlData(datas):    table = 'movies'    keys = '名次,电影名称,日期,总场次,废场,人次,上座率,票价,票房'    db = connectMysql()    cursor = db.cursor()    for data in datas:        values = ','.join(['%s']*len(data))        sql = 'INSERT INTO {table}({keys}) VALUES({values})'.format(table=table,keys = keys ,values = values)        print(sql)        print(tuple(data))        try :            if cursor.execute(sql, tuple(data)):                print("Succcessful")                db.commit()        except:            traceback.print_exc()            print("Failed")            db.rollback()    db.close()def main():    createMysqlTable()    url="http://58921.com/daily/wangpiao"    html=getHtmlText(url)    rlist=parsePage(html)    mysqlData(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果输出效果："><a href="#结果输出效果：" class="headerlink" title="结果输出效果："></a>结果输出效果：</h3><p><img src="https://img-blog.csdnimg.cn/20200423215438570.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> 票房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——搜狐最新时政新闻数据爬取——BS4</title>
      <link href="/2019/05/21/wang-luo-pa-chong-sou-hu-zui-xin-shi-zheng-xin-wen-shu-ju-pa-qu/"/>
      <url>/2019/05/21/wang-luo-pa-chong-sou-hu-zui-xin-shi-zheng-xin-wen-shu-ju-pa-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——搜狐最新时政新闻数据爬取"><a href="#网络爬虫——搜狐最新时政新闻数据爬取" class="headerlink" title="网络爬虫——搜狐最新时政新闻数据爬取"></a>网络爬虫——搜狐最新时政新闻数据爬取</h2><p>目标网址：<a href="https://www.sohu.com/c/8/1460?spm=smpc.null.side-nav.14.1584869506422WxyU9iK" target="_blank" rel="noopener">https://www.sohu.com/c/8/1460?spm=smpc.null.side-nav.14.1584869506422WxyU9iK</a></p><p>目标数据描述：（1）标题 （2）链接地址<br><img src="https://img-blog.csdnimg.cn/20200413211744198.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>要求：</p><p>（1）使用urllib库或者requests抓取网页源代码；</p><p>（2）使用BeautifulSoup的CSS选择器方法对获取的源代码进行解析，并成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）利用框架结构，通过函数调用，参数传递，实现目标数据抓取，并尝试将结果写入文本文件中。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsfrom bs4 import BeautifulSoupimport bs4 def getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        print("A")        return ""def findUniverse(ulist , html):    soup = BeautifulSoup(html,"html.parser")    for div in soup.find(attrs=['class','news-list clearfix']).children:        if isinstance(div ,bs4.element.Tag):            list_0 = div.find('h4').find('a').get('href')            list_1 = div.find('h4').string.replace(" ",'').replace("\n",'')            ulist.append([list_0,list_1])def findSame(ulist,html):    soup = BeautifulSoup(html,"html.parser")    for div in soup.find(attrs=['class','second-nav']).children:        if isinstance(div ,bs4.element.Tag):            ulist.append(div.find('a').get('href'))    return ulistdef printUniverse(ulist):    tplt = '{0:30}\t{1:18}'    print(tplt.format("网址","名称",chr(12288)))    for i in range(len(ulist)):        u = ulist[i]        print(tplt.format(u[0],u[1],chr(12288)))def main():    ulist = []    ulist_Same = []    url = 'https://www.sohu.com/c/8/1460?spm=smpc.null.side-nav.14.1585491604691ZcX26aI'        html = getHtmlText(url)    ulist_Same = findSame(ulist_Same,html)    for i in range(len(ulist_Same) - 2 ):        url = 'https://www.sohu.com' + ulist_Same[i+1]        html = getHtmlText(url)            findUniverse(ulist,html)    printUniverse(ulist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出如下："><a href="#输出如下：" class="headerlink" title="输出如下："></a>输出如下：</h3><p><img src="https://img-blog.csdnimg.cn/20200413212248457.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BS4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影排行榜数据抓取（高级）——BS4</title>
      <link href="/2019/05/04/wang-luo-pa-chong-dou-ban-dian-ying-pai-xing-bang-shu-ju-zhua-qu-gao-ji/"/>
      <url>/2019/05/04/wang-luo-pa-chong-dou-ban-dian-ying-pai-xing-bang-shu-ju-zhua-qu-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——豆瓣电影排行榜数据抓取（高级）"><a href="#网络爬虫——豆瓣电影排行榜数据抓取（高级）" class="headerlink" title="网络爬虫——豆瓣电影排行榜数据抓取（高级）"></a>网络爬虫——豆瓣电影排行榜数据抓取（高级）</h2><h3 id="目标网址："><a href="#目标网址：" class="headerlink" title="目标网址："></a>目标网址：</h3><p>豆瓣电影排行：<a href="https://movie.douban.com/top250?start=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=</a></p><p>目标数据描述：排名、电影名称、导演、主演、评价人数等信息，将尽可能多的数据抓取保存<br><img src="https://img-blog.csdnimg.cn/20200413210123780.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>任务明细：</p><p>（1）使用requests库实现该网站网页源代码的获取；</p><p>（2）使用BeautifulSoup对获取的源代码进行解析，并成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据打印输出，有能力的同学可以试着将结果写入文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><p>可以选择定义全局列表，将目标数据获取后添加到列表中，同时，注意观察分页时url的变化，以便获取整个的排行榜数据。建议通过for循环传递变化参数实现。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsfrom bs4 import BeautifulSoupimport bs4 def getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        result=(result.text.replace('<br>','')).replace('<br/>','')        return result    except:        return ""def findUniverse(ulist , html):    soup = BeautifulSoup(html,"html.parser")       list_ = [0,0,0,0,0,0,0]    for li in soup.find(attrs=['class','grid_view']).children:        if isinstance(li ,bs4.element.Tag):            list_[0] = li.find('em').string            list_[1] = li.find(attrs=['class','title']).string            list_[2] = li.find(attrs=['class','bd']).find(attrs=['class','']).string.strip().split(" ")[1].replace(" ",'')            list_[3] = li.find(attrs=['class','bd']).find(attrs=['class','']).string.strip().split(" ")[4].replace(" ",'')                  list_[4] = li.find(attrs=['class','star']).span.find_next_sibling().string.strip()            list_[5] = li.find(attrs=['class','star']).span.find_next_sibling().find_next_sibling().find_next_sibling().string.strip()            if li.find(attrs=['class','quote']) is  not None:                list_[6] = li.find(attrs=['class','quote']).span.string            else:                list_[6] = None            ulist.append([list_[0],list_[1],list_[2],list_[3],list_[4],list_[5],list_[6]])def printUniverse(ulist):    tplt = '{0:^4}\t{1:^10}\t{2:10}\t{3:10}\t{4:10}\t{5:10}'    print(tplt.format("排名","电影名称","导演","主演","评分","评价人数",chr(12288)))    for i in range(len(ulist)):        u = ulist[i]        print(tplt.format(u[0],u[1],u[2],u[3],u[4],u[5],chr(12288)))def main():    ulist = []     for i in range(10):        url =  'https://movie.douban.com/top250?start=' + str( 25 * i )         html = getHtmlText(url)        findUniverse(ulist,html)    printUniverse(ulist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：<br><img src="https://img-blog.csdnimg.cn/2020041321124824.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BS4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Bilibili热门视频Top100弹幕的数据爬取与分析（源代码）</title>
      <link href="/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-dan-mu-de-shu-ju-pa-qu-yu-fen-xi-yuan-dai-ma/"/>
      <url>/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-dan-mu-de-shu-ju-pa-qu-yu-fen-xi-yuan-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——基于Bilibili热门视频Top100弹幕的数据爬取与分析"><a href="#网络爬虫——基于Bilibili热门视频Top100弹幕的数据爬取与分析" class="headerlink" title="网络爬虫——基于Bilibili热门视频Top100弹幕的数据爬取与分析"></a>网络爬虫——基于Bilibili热门视频Top100弹幕的数据爬取与分析</h2><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>目标网站：Bilibili热门视频Top100</p><p>目标网址：<br><a href="https://www.bilibili.com/ranking?" target="_blank" rel="noopener">https://www.bilibili.com/ranking?</a>（每过几天都会变的哦）<br><img src="https://img-blog.csdnimg.cn/20200518053212353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h4><p>实现对于Bilibili热门视频Top100弹幕的数据爬取与分析</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-py"><code class="language-py">from lxml import etreeimport timeimport jiebaimport numpy as npfrom PIL import Imageimport requestsimport refrom requests.exceptions import RequestExceptionfrom wordcloud import WordCloud as wcclass getUrl ():    def __init__(self,url):        self.url = url    def getTxt(self):        self.headers = {            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'                }        try:            result = requests.get(self.url,headers=self.headers,timeout=30)            result.raise_for_status()            result.encoding = result.apparent_encoding            return result.text        except:            return ""        def parsePage(self):        res = self.getTxt()        newhtml =etree.HTML(res,etree.HTMLParser())        result=newhtml.xpath('//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a//@href')        return  resultclass getAvNum():    def __init__(self,url):        self.url = url    def getTxt(self):        self.headers = {            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'                }        try:            result = requests.get(self.url,headers=self.headers,timeout=30)            result.raise_for_status()            result.encoding = result.apparent_encoding            return result.text        except:            return ""    def parsePage(self):        res = self.getTxt()        newhtml =etree.HTML(res,etree.HTMLParser())        rlist=newhtml.xpath('/html/head/meta[10]//@content')        resp = requests.get(rlist[0],headers=self.headers)        match_rule = r'cid=(.*?)&aid'        oid = re.search(match_rule,resp.text).group().replace('cid=','').replace('&aid','')        return  oidclass Bilibili():    def __init__(self,oid):        self.headers={        'Host': 'api.bilibili.com',        'Connection': 'keep-alive',        'Cache-Control': 'max-age=0',        'Upgrade-Insecure-Requests': '1',        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36',        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',        'Accept-Encoding': 'gzip, deflate, br',        'Accept-Language': 'zh-CN,zh;q=0.9',        'Cookie': 'finger=edc6ecda; LIVE_BUVID=AUTO1415378023816310; stardustvideo=1; CURRENT_FNVAL=8; buvid3=0D8F3D74-987D-442D-99CF-42BC9A967709149017infoc; rpdid=olwimklsiidoskmqwipww; fts=1537803390'        }        self.url='https://api.bilibili.com/x/v1/dm/list.so?oid='+str(oid)        self.barrage_reault=self.get_page()    def get_page(self):        try:            time.sleep(0.5)            response=requests.get(self.url,headers=self.headers)        except Exception as e:            print('获取xml内容失败,%s' % e)            return False        else:            if response.status_code == 200:                with open('bilibili.xml','wb') as f:                    f.write(response.content)                return True            else:                return False    def param_page(self):        time.sleep(1)        if  self.barrage_reault:            html=etree.parse('bilibili.xml',etree.HTMLParser())            results=html.xpath('//d//text()')            return resultsdef remove_double_barrage(resultlist):    double_barrage=[]    results=[]    barrage=set()    for result in resultlist:        if result not in results:            results.append(result)        else:            double_barrage.append(result)            barrage.add(result)    return double_barrage,results,barragedef make_wordCould(resultlist):    double_barrages,results,barrages=remove_double_barrage(resultlist)    # 重词计数    with open('barrages.txt','w', -1, 'utf-8', None, None) as f:        for barrage in barrages:            amount=double_barrages.count(barrage)            stt = barrage+':'+str(amount+1)+'\n'            f.write(stt)    # 设置停用词    stop_words=['【','】',',','.','?','!','。']    words=[]    if results:        for result in results:            for stop in stop_words:                result=''.join(result.split(stop))            words.append(result)        # 列表拼接成字符串        words=''.join(words)        words=jieba.cut(words)        words=''.join(words)        luo=np.array(Image.open('洛天依.jpg'))            w=wc(font_path='‪C:/Windows/Fonts/SIMYOU.TTF',background_color='white',width=1600,height=1600,max_words=2000,mask=luo)        w.generate(words)        w.to_file('luo.jpg')def main():    url="https://www.bilibili.com/ranking?spm_id_from=333.851.b_7072696d61727950616765546162.3"    urls = getUrl(url)    strUrl = urls.parsePage()    ress = []    for i in strUrl:        AV = getAvNum(i)        oid = AV.parsePage()        b=Bilibili(oid)        for j in b.param_page():            ress.append(j)    make_wordCould(ress)if __name__ == '__main__':    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体文件可以到我的<a href="https://github.com/michaelminger/Bilibili" target="_blank" rel="noopener">github</a>上面下载</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Bilibili热门视频Top100最热分区爬取与分析（报告）</title>
      <link href="/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-dan-mu-de-shu-ju-pa-qu-yu-fen-xi-bao-gao-ban/"/>
      <url>/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-dan-mu-de-shu-ju-pa-qu-yu-fen-xi-bao-gao-ban/</url>
      
        <content type="html"><![CDATA[<p>一、研究背景<br>能够在观看视频的过程中发表自己的评论，并且评论可以在你所希望的时间点、位置以滑行或停留的方式出现在视频中，所有观看视频的人都可以看见评论，这样一类的评论叫做弹幕，此类网站叫弹幕网站。<br>弹幕视频系统源自日本弹幕视频分享网站（niconico动画），国内首先引进为AcFun以及后来的bilibili。大量吐槽评论从屏幕飘过时效果看上去像是飞行射击游戏里的弹幕，所以NICO网民将这种有大量的吐槽评论出现时的效果做弹幕。在中国，本来只有大量评论同时出现才能叫弹幕，但是随着误用单条评论也能叫弹幕了。在国内通常被认为本意是军事用语中密集的炮火射击，过于密集以至于像一张幕布一样。英文称“Bullet Hell”（子弹地狱）或“Bullet Curtain”（弹幕）<br>弹幕可以给观众一种“实时互动”的错觉，虽然不同弹幕的发送时间有所区别，但是其只会在视频中特定的一个时间点出现，因此在相同时刻发送的弹幕基本上也具有相同的主题，在参与评论时就会有与其他观众同时评论的错觉。而传统的播放器评论系统是独立于播放器之外的，因此评论的内容大多围绕在整个视频上，话题性不强，也没有“实时互动”的感觉。</p><p>二、研究目的及意义<br>在视频软件层出不穷的当下。除了优质的视频内容，对于社区文化如何探索成为当下各个公司极力探索的目标。新时期自媒体盛行，BiliBili相较于同类软件，其社区文化呈现欣欣向荣之势，拥有较高的日活跃量。而弹幕文化俨然成为其不可或缺的一部分。<br>2019年年末，Bilibili曾发布年度十大热词，‘AWSL’夺得头筹。紧随其后的是‘名场面’，‘逮虾户’……，这些我们日常生活中耳熟能详的‘新词汇’。<br>由于互联网屏蔽了用户的设备差异，因此网络视频服务商可以获得格式统一、更加规范的用户使用数据，根据不同用户的使用数据完成视频推荐。美国著名电子商务企业亚马逊很早就开始探索推荐算法在电子商务中的应用，并已经取得了显著的成果。发表弹幕、观看弹幕，本身就有一种实时互动的错觉，完成着实实在在的、直接的互动。网站会根据用户的点击量进行视频推荐，参与热烈讨论的视频会出现在主页，受众能最快时间地看到页面。将来也许还可以通过搜索引擎的优化，把热门话题，热门词语，热门搜索等作为视频推荐的依据，让受众观看到与自己兴趣最相符的视频。<br>通过对于当前时间段热门排名TOP100中弹幕进行分析，将数据进行可视化处理，得到最热词汇，既可以知道在这一时间段网络舆论流行的大体趋势，把握用户心里态度，加强受众的互动反馈。还可以激发用户对于弹幕文化的探索的兴趣。使得用户保持新鲜度，延长软件寿命。<br>三、实验环境及技术介绍<br>1.爬虫技术简介<br>网络爬虫是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本，其实通俗的讲就是通过程序去获取web页面上自己想要的数据，也就是自动抓取数据。爬虫的目地在于将目标网页数据下载至本地，以便进行后续的数据分析.爬虫技术的兴起源于海量网络数据的可用性,通过爬虫技术,能够较为容易的获取网络数据，并通过对数据的分析,得出有具有价值的结论。<br>Python语言简单易用,现成的爬虫框架和工具包降低了使用门槛,具体使用时配合正则表达式的运用,使得数据抓取工作变得生动有趣。<br>2.所用到的python库<br>2.1requests<br>Requests 是用Python语言编写，基于 urllib，采用Apache2 Licensed 开源协议的HTTP库。Requests 继承了urllib的所有特性。Requests支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动确定响应内容的编码，支持国际化的URL和POST 数据自动编码。主要用于请求URL，获取返回信息，打印输出响应头，和重定向等。在爬取数据过程中，使用了request库的get方法来发送请求。Request请求方式有：<br>GET:请求指定的页面信息，并返回实体主体。<br>HEAD:只请求页面的首部。<br>POST:请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。<br>PUT:从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE:请求服务器删除指定的页面。<br>get和post比较常见GET请求将提交的数据放置在HTTP请求协议头中<br>POST提交的数据则放在实体数据中<br>2.2XPath<br>XPath 是一门在 XML文档中查找信息的语言。用于在 XML文档中通过元素和属性进行导航，选取XML文档中的节点或者节点集。这些路径表达式和在常规的电脑文件系统中看到的表达式非常相似。在爬取豆瓣TOP250的过程中，使用xpath查找歌曲名、歌手、评分等信息。<br><img src="https://img-blog.csdnimg.cn/20200518052326681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图2-2 Xpath路径表达式图<br>2.3lxml<br>lxml 是一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML /XML数据。lxml和正则一样，也是用C实现的，是一款高性能的Python HTML /XML 解析器，可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。<br>使用lxml.etree处理XML文档。简要讲述ElementTree API的主要要概念，和一些简单的增强，让处理XML更简单。<br>2.4Jieba<br> jieba是优秀的中文分词第三方库。通过分词的方式从中文文本获得单个的词语，但是属于拓展库，需要额外安装。其拥有三种分词模式，最简单只需掌握一个函数。jieba分词的原理： 其依靠中文词库，利用一个中文词库，确定汉字之间的关联概率， 将汉字间相邻概率大的组成词组，形成分词结果， 除了分词，用户还可以添加自定义的词组。<br>2.5WordCloud<br>wordcloud库，可以说是python非常优秀的词云展示第三方库。词云以词语为基本单位更加直观和艺术的展示文本，也叫文字云，对文本中出现频率较高的“关键词”予以视觉化的展现，过滤掉大量的低频低质的文本信息，使得浏览者只要一眼扫过文本就可领略文本的主旨。<br>3.数据分析工具<br>3.1Jupyter Notebook<br>Notebooks是Donald Knuth 1984年提出的文本化编程的一种形式。Jupyter Notebook 的本质是一个 Web 应用程序，结合文本化编程，文本和代码交错在一起，而不是分成两个独立地本分。是个集成文本，数学公式，代码和可视化的可分享文本。便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。<br>用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。Notebooks 很快已经成为了数据操作不可或缺的工具。它在 大数据清理和探究,可视化,机器学习, 和 大数据分析中都有广泛运用。并且Notebooks 可以直接在github直接被读取. 这是一个非常有用的功能，可以方便地分享。<br>3.2Excel<br>Excel不仅是一个数据存储工具，还是一个简单的数据分析工具，添加EXCEL数据分析插件后，可以做一些简单相关、回归等分析。而Excel可以说是万能但又不是万能的，学习Excel就是为了用来统计数据分析数据的，大而复杂的数据和分析有时候用Excel处理并不是最佳选择。Excel和数据库之间可以进行数据转换，但是当Excel的数据量过大的时候，它的查询和计算的速度会明显下降。<br>Excel提供了有限的安全性，它只能限制用户访问和修改的权限，但是无法对用户进行角色的管理，也不能对数据进行行级的访问限制。<br>当然Excel也有自身的的优势之处：<br>1、数据透视功能。<br>2、统计分析，非常独特，常用的检验方式一键搞定。<br>3、图表功能， Excel拥有各种丰富的可开发的图表形式的独门武工。<br>4、自动汇总功能，这个功能其他程序都有，但是Excel简便灵活。<br>总地来说，Excel适合于开发单机版、访问量与开发维护量都不是很大、对数据有分析建模功能的应用程序。<br>四、数据爬取<br>4.1抓取Bilibili热门视频Top100的网址<br>本实验在浏览器搜索Bilibili热门视频Top100的网址,就能得到要采集数据的页面，它的URL为<a href="https://www.bilibili.com/ranking，页面如下图4-1所示。" target="_blank" rel="noopener">https://www.bilibili.com/ranking，页面如下图4-1所示。</a><br><img src="https://img-blog.csdnimg.cn/20200518052544165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-1Bilibili热门视频Top100排行图<br>4.2对网址进行转化，获得Oid号码<br>通过对网页源代码的处理，将网页源地址中的地址数据转换成AV地址样式，再通过正则表达式’cid=(.*?)&amp;aid’，获取其Cid码，最后再转化成Oid码。获取Oid码的源代码如下图4-2所示。<br><img src="https://img-blog.csdnimg.cn/20200518052548949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-2 Oid码源代码获取图<br>获取Oid码的代码运行结果如下图4-2所示。<br><img src="https://img-blog.csdnimg.cn/20200518052552794.png" alt="在这里插入图片描述"><br>图4-3代码运行结果<br>4.3抓取弹幕信息lxml文件<br>首先，导入requests包，利用requests构建一个简单地的GET请求，把网页的headers（其中包含了User-Agent字段信息，是浏览器的标识信息）输入，这时网站会判断如果是客户端发起的GET请求，它会返回相应的请求信息。通过Oid码才能得到弹幕存储所在的lxml文件。Lxml代码如下图4-3所示。<br><img src="https://img-blog.csdnimg.cn/20200518052558600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-4 Lxml获取代码<br><img src="https://img-blog.csdnimg.cn/20200518052602894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-5 Lxml文件图<br>4.4抓取所有弹幕信息存储并处理<br>将所得到的lxml文件，通过xpath进行抓取并且存储到数组results中。<br><img src="https://img-blog.csdnimg.cn/20200518052611594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-6 弹幕信息爬取代码<br>通过append方法将所有弹幕信息存储，以待处理，如下所示：<br><img src="https://img-blog.csdnimg.cn/20200518052614189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-7 所有弹幕整合代码<br>通过自定义的remove_double_barrage（）方法将弹幕信息进行去重处理，如下所示：<br><img src="https://img-blog.csdnimg.cn/20200518052617565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-8 弹幕信息去重代码<br>4.5存储数据<br>利用lxml库采集视频的弹幕内容信息。将弹幕内容barrage，及弹幕出现次数amount进行存储，具体代码如下图4-3所示。<br><img src="https://img-blog.csdnimg.cn/20200518052622401.png" alt="在这里插入图片描述"><br>图4-9存储数据图<br>4.6数据展示<br>将采集的数据合并在一起,将采集的数据存入txt中，从文件中可以看出，收集的信息字段为‘弹幕内容’，‘出现次数’。进行数据分析就是对这两字段进行数据分析和可视化展示。部分数据展示如下图4-4所示：<br><img src="https://img-blog.csdnimg.cn/20200518052625874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4-10数据展示图</p><p>五、数据分析<br>利用wordCloud对爬取的数据进行分析来进一步呈现。<br>5.1最热弹幕分析<br>对Bilibili热门视频Top100弹幕进行分析，选取榜上所有弹幕进行针对性分析：<br>从图中可以明显看出，统计期间最热的弹幕要数“奔涌吧，后浪”。其后是：“狗头”“后浪，奔涌吧”“doge”……<br><img src="https://img-blog.csdnimg.cn/20200518052631531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图5-1 最热弹幕词云<br>5.2最热区分析<br>Bilibili包括有动画、番剧、音乐、舞蹈、游戏、科技、生活、鬼畜、时尚、广告、娱乐、影视等多个分区，通过Top100上榜分区处理分析得到当前最热分区。<br><img src="https://img-blog.csdnimg.cn/20200518052700838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图5-2 数据统计样本<br>·<img src="https://img-blog.csdnimg.cn/20200518052704174.png" alt="在这里插入图片描述"><br>图5-3 样本分析</p><p>六、总结<br>从定义上来说，爬虫就是模拟用户自动浏览并且保存网络数据的程序，当然，大部分的爬虫都是爬取网页信息（文本，图片，媒体流）。无论是动态还是静态网页，所有的用户可以直观看到的，都有爬取下来的可能。<br>最简单的流程：获取网页源代码，分析源码，存储数据。<br>即从功能上来讲的，数据采集，处理，储存三个部分。传统爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。然后，它将根据一定的搜索策略从队列中选择下一步要抓取的网页URL，并重复上述过程，直到达到系统的某一条件时停止。另外，所有被爬虫抓取的网页将会被系统存贮，进行一定的分析、过滤，并建立索引，以便之后的查询和检索；对于聚焦爬虫来说，这一过程所得到的分析结果还可能对以后的抓取过程给出反馈和指导。<br>发起请求：通过HTTP库向目标站点发起请求，即发送一个Request，请求可以包含额外的headers等信息，等待服务器响应。<br>获取响应内容：如果服务器能正常响应，会得到一个Response，Response的内容便是所要获取的页面内容，类型可能有HTML，Json字符串，二进制数据（如图片视频）等类型。<br>解析内容：得到的内容可能是HTML，可以用正则表达式、网页解析库进行解析。可能是Json，可以直接转为Json对象解析，可能是二进制数据，可以做保存或者进一步的处理。<br>保存数据：保存形式多样，可以存为文本，也可以保存至数据库，或者保存特定格式的文件。<br>七、附录<br>源代码请看下一篇</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Bilibili热门视频Top100最热分区爬取与分析</title>
      <link href="/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-zui-re-fen-qu-pa-qu-yu-fen-xi/"/>
      <url>/2019/05/03/ji-yu-bilibili-re-men-shi-pin-top100-zui-re-fen-qu-pa-qu-yu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——基于Bilibili热门视频Top100最热分区爬取与分析"><a href="#网络爬虫——基于Bilibili热门视频Top100最热分区爬取与分析" class="headerlink" title="网络爬虫——基于Bilibili热门视频Top100最热分区爬取与分析"></a>网络爬虫——基于Bilibili热门视频Top100最热分区爬取与分析</h2><p>这个主要是配合之前报告使用的，这里就不多赘述了。<br>先爬地址，再爬取地址里的分区，最后整合。csv存储。</p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>目标网站：Bilibili热门视频Top100</p><p>目标网址：<br><a href="https://www.bilibili.com/ranking?" target="_blank" rel="noopener">https://www.bilibili.com/ranking?</a>（每过几天都会变的哦）</p><pre class="line-numbers language-py"><code class="language-py">from lxml import etreeimport timeimport jiebaimport numpy as npfrom PIL import Imageimport requestsimport refrom requests.exceptions import RequestExceptionfrom wordcloud import WordCloud as wcimport csvclass getUrl ():    def __init__(self,url):        self.url = url    def getTxt(self):        self.headers = {            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'                }        try:            result = requests.get(self.url,headers=self.headers,timeout=30)            result.raise_for_status()            result.encoding = result.apparent_encoding            return result.text        except:            return ""        def parsePage(self):        res = self.getTxt()        newhtml =etree.HTML(res,etree.HTMLParser())        result=newhtml.xpath('//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a//@href')        return  resultclass getAvNum():    def __init__(self,url):        self.url = url    def getTxt(self):        self.headers = {            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'                }        try:            result = requests.get(self.url,headers=self.headers,timeout=30)            result.raise_for_status()            result.encoding = result.apparent_encoding            return result.text        except:            return ""    def parsePage(self):        res = self.getTxt()        newhtml =etree.HTML(res,etree.HTMLParser())        rlist=newhtml.xpath('//*[@id="viewbox_report"]/div[1]/span[1]/a[1]//text()')        return  rlistclass Bilibili():    def __init__(self,oid):        self.headers={        'Host': 'api.bilibili.com',        'Connection': 'keep-alive',        'Cache-Control': 'max-age=0',        'Upgrade-Insecure-Requests': '1',        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36',        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',        'Accept-Encoding': 'gzip, deflate, br',        'Accept-Language': 'zh-CN,zh;q=0.9',        'Cookie': 'finger=edc6ecda; LIVE_BUVID=AUTO1415378023816310; stardustvideo=1; CURRENT_FNVAL=8; buvid3=0D8F3D74-987D-442D-99CF-42BC9A967709149017infoc; rpdid=olwimklsiidoskmqwipww; fts=1537803390'        }        self.url='https://api.bilibili.com/x/v1/dm/list.so?oid='+str(oid)        self.barrage_reault=self.get_page()    def get_page(self):        try:            time.sleep(0.5)            response=requests.get(self.url,headers=self.headers)        except Exception as e:            print('获取xml内容失败,%s' % e)            return False        else:            if response.status_code == 200:                with open('bilibili.xml','wb') as f:                    f.write(response.content)                return True            else:                return False    def param_page(self):        time.sleep(1)        if  self.barrage_reault:            html=etree.parse('bilibili.xml',etree.HTMLParser())            results=html.xpath('//d//text()')            return resultsdef remove_double_barrage(resultlist):    double_barrage=[]    results=[]    barrage=set()    for result in resultlist:        if result not in results:            results.append(result)        else:            double_barrage.append(result)            barrage.add(result)    return double_barrage,results,barragedef make_wordCould(resultlist):    double_barrages,results,barrages=remove_double_barrage(resultlist)    with open('barrages.txt','w', -1, 'utf-8', None, None) as f:        for barrage in barrages:            amount=double_barrages.count(barrage)            stt = barrage+':'+str(amount+1)+'\n'            f.write(stt)    stop_words=['【','】',',','.','?','!','。']    words=[]    if results:        for result in results:            for stop in stop_words:                result=''.join(result.split(stop))            words.append(result)        # 列表拼接成字符串        words=''.join(words)        words=jieba.cut(words)        words=''.join(words)        luo=np.array(Image.open('洛天依.jpg'))            w=wc(font_path='‪C:/Windows/Fonts/SIMYOU.TTF',background_color='white',width=1600,height=1600,max_words=2000,mask=luo)        w.generate(words)        w.to_file('luo.jpg')def csvdata(data):    with open('top20.csv','w',encoding = 'utf-8',newline='')as csvfile:        fieldnames = ['分类']        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({'分类':i[0]})        print('ok')           def main():    url="https://www.bilibili.com/ranking?spm_id_from=333.851.b_7072696d61727950616765546162.3"    urls = getUrl(url)    strUrl = urls.parsePage()    ress = []    for i in strUrl:        AV = getAvNum(i)        oid = AV.parsePage()        ress.append(oid)    csvdata(ress)if __name__ == '__main__':    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影排行榜数据抓取（初级）——BS4</title>
      <link href="/2019/05/03/wang-luo-pa-chong-dou-ban-dian-ying-pai-xing-bang-shu-ju-zhua-qu-chu-ji/"/>
      <url>/2019/05/03/wang-luo-pa-chong-dou-ban-dian-ying-pai-xing-bang-shu-ju-zhua-qu-chu-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——豆瓣电影排行榜数据抓取（初级）"><a href="#网络爬虫——豆瓣电影排行榜数据抓取（初级）" class="headerlink" title="网络爬虫——豆瓣电影排行榜数据抓取（初级）"></a>网络爬虫——豆瓣电影排行榜数据抓取（初级）</h2><h3 id="目标网址："><a href="#目标网址：" class="headerlink" title="目标网址："></a>目标网址：</h3><p>豆瓣电影排行：<a href="https://movie.douban.com/top250?start=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=</a></p><p>目标数据描述：（1）排名（2）电影名称<br><img src="https://img-blog.csdnimg.cn/20200413210123780.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>任务明细：</p><p>（1）使用requests库实现该网站网页源代码的获取；</p><p>（2）使用BeautifulSoup对获取的源代码进行解析，并成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据打印输出，有能力的同学可以试着将结果写入文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><p>可以选择定义全局列表，将目标数据获取后添加到列表中，同时，注意观察分页时url的变化，以便获取整个的排行榜数据。建议通过for循环传递变化参数实现。</p><p>下一阶段，目标数据增加导演、主演、评价人数等信息，将尽可能多的数据抓取保存。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsfrom bs4 import BeautifulSoupimport bs4 def getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        result=(result.text.replace('<br>','')).replace('<br/>','')        return result    except:        return ""def findUniverse(ulist , html):    soup = BeautifulSoup(html,"html.parser")    list = [0,0]    for li in soup.find(attrs=['class','grid_view']).children:        if isinstance(li ,bs4.element.Tag):            list[0] = li.find('em').string            list[1] = li.find(attrs=['class','title']).string            ulist.append([list[0],list[1]])def printUniverse(ulist):    tplt = '{0:^10}\t{1:^10}'    print(tplt.format("排名","电影名称",chr(12288)))    for i in range(len(ulist)):        u = ulist[i]        print(tplt.format(u[0],u[1],chr(12288)))def main():    ulist = []    url = 'https://movie.douban.com/top250?start='    html = getHtmlText(url)    findUniverse(ulist,html)    printUniverse(ulist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：<br><img src="https://img-blog.csdnimg.cn/20200413210616682.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BS4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——抓取TIOBE指数前20名排行开发语言</title>
      <link href="/2019/04/27/wang-luo-pa-chong-zhua-qu-tiobe-zhi-shu-qian-20-ming-pai-xing-kai-fa-yu-yan/"/>
      <url>/2019/04/27/wang-luo-pa-chong-zhua-qu-tiobe-zhi-shu-qian-20-ming-pai-xing-kai-fa-yu-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——抓取TIOBE指数前20名排行开发语言"><a href="#网络爬虫——抓取TIOBE指数前20名排行开发语言" class="headerlink" title="网络爬虫——抓取TIOBE指数前20名排行开发语言"></a>网络爬虫——抓取TIOBE指数前20名排行开发语言</h2><p>目标网址<br>TIOBE指数前20名排行开发语言：<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">https://www.tiobe.com/tiobe-index/</a></p><p>说明<br> TIOBE排行榜是根据互联网上有经验的程序员、课程和第三方厂商的数量，并使用搜索引擎（如Google、Bing、Yahoo!）以及Wikipedia、Amazon、YouTube统计出排名数据，只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少。</p><p> 该指数可以用来检阅开发者的编程技能能否跟上趋势，或是否有必要作出战略改变，以及什么编程语言是应该及时掌握的。观察认为，该指数反应的虽并非当前最流行或应用最广的语言，但对世界范围内开发语言的走势仍具有重要参考意义。</p><p><img src="https://img-blog.csdnimg.cn/20200413220913662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>目标数据：（如上表所示）</p><p>（1）2020年3月的排名（2）2019年3月排名（3）编程语言（4）评分（5）变化率</p><p>明细：<br>（1）使用urllib或者requests库抓取目标网页中的网页源代码；</p><p>（2）使用lxml库中的xpath方法解析源代码，提取上面所示的目标数据，并打印输出；</p><p>（3）尝试着使用try..except方法及时捕获异常。</p><p>（4）可以尝试将获取的数据保存到文本文件中。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsfrom requests.exceptions import RequestExceptionfrom lxml import etreedef one_to_page(url):    headers={        'user-agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3756.400 QQBrowser/10.5.4039.400'    }    try:        response=requests.get(url,headers=headers)        body=response.text        return body    except RequestException as e:        print('request is error!',e)def parsePage(html):    htmlNew = etree.HTML(html,etree.HTMLParser())    result = htmlNew.xpath('//table[contains(@class,"table-top20")]/tbody/tr//text()')    pos = 0    for i in range(20):        if i == 0:            yield result[i:5]        else:            yield result[pos:pos+5]        pos += 5def printRank(data):    for i in data:        rank = {            "2020年3月":i[0],            "2019年3月":i[1],            "编程语言":i[2],            "评分":i[3],            "变化率":i[4],            }        print(rank)def printRankEasy(data):    tplt = "{0:^10}\t{1:^10}\t{2:^20}\t{3:^10}\t{4:^10}"    print(tplt.format("2020年3月","2019年3月","编程语言","评分","变化率",chr(12288)))    for i in data:        print(tplt.format(i[0],i[1],i[2],i[3],i[4],chr(12288)))def main():    url = 'https://www.tiobe.com/tiobe-index/'    html = one_to_page(url)    data = parsePage(html)    printRankEasy(data)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下<br><img src="https://img-blog.csdnimg.cn/20200413221221131.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xpath </tag>
            
            <tag> TIOBE指数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大学排名数据抓取</title>
      <link href="/2019/04/20/wang-luo-pa-chong-zhong-guo-da-xue-pai-ming-shu-ju-zhua-qu/"/>
      <url>/2019/04/20/wang-luo-pa-chong-zhong-guo-da-xue-pai-ming-shu-ju-zhua-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——中国大学排名数据抓取"><a href="#网络爬虫——中国大学排名数据抓取" class="headerlink" title="网络爬虫——中国大学排名数据抓取"></a>网络爬虫——中国大学排名数据抓取</h2><h3 id="目标网址"><a href="#目标网址" class="headerlink" title="目标网址"></a>目标网址</h3><p>中国大学排名网：<a href="http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html" target="_blank" rel="noopener">http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html</a></p><p> 全球有很多份大学排名，这里以上海交通大学研发的“软科中国最好大学排名2019”为例，，编写“大学排名爬虫”，从网络上获取数据 。拟从该网址爬取该名单上310 所国内大学的排名数据，并将它们打印出来。<br><img src="https://img-blog.csdnimg.cn/20200413204633837.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>大学排名爬虫的构建需要三个重要步骤：</p><p>第一，从网络上获取网页内容；</p><p>第二，分析网页内容并提取有用数据到恰当的数据结构中；</p><p>第三，利用数据结构展示或进一步处理数据。</p><p>由于大学排名是一个典型的二维数据，因此，采用二维列表存储该排名所涉及的表单数据。具体来说，采用requests 库爬取网页内容，使用beautifulsoup4 库分析网页中数据，提取310 个学校的排名及相关数据，存储到二维列表中，最后采用用户偏好的方式打印出来。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-py"><code class="language-py">import requestsfrom bs4 import BeautifulSoupimport bs4 def getHtmlText(url):    try:        result = requests.get(url,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def findUniverse(ulist , html):    soup = BeautifulSoup(html,"html.parser")    for tr in soup.find(attrs=['class','hidden_zhpm']).children:        if isinstance(tr ,bs4.element.Tag):            tds = tr('td')            ulist.append([tds[0].string, tds[1].string,tds[3].string ])def printUniverse(ulist):    tplt = '{0:^10}\t{1:{3}^10}\t{2:^10}'    print(tplt.format("排名","学校名称","总分",chr(12288)))    for i in range(len(ulist)):        u = ulist[i]        print(tplt.format(u[0],u[1],u[2],chr(12288)))def main():    ulist = []    url = 'http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html'    html = getHtmlText(url)    findUniverse(ulist,html)    printUniverse(ulist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出如下：<br><img src="https://img-blog.csdnimg.cn/20200413205104149.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BS4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——前程无忧网数据获取及存储（低级）</title>
      <link href="/2019/04/10/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-cun-chu-di-ji/"/>
      <url>/2019/04/10/wang-luo-pa-chong-qian-cheng-wu-you-wang-shu-ju-huo-qu-ji-cun-chu-di-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——前程无忧网数据获取及存储（低级）"><a href="#网络爬虫——前程无忧网数据获取及存储（低级）" class="headerlink" title="网络爬虫——前程无忧网数据获取及存储（低级）"></a>网络爬虫——前程无忧网数据获取及存储（低级）</h2><h3 id="目标网站：前程无忧招聘网"><a href="#目标网站：前程无忧招聘网" class="headerlink" title="目标网站：前程无忧招聘网"></a>目标网站：前程无忧招聘网</h3><p>目标网址：<a href="https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html" target="_blank" rel="noopener">https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html</a></p><p>目标数据：（1）职位名（2）公司名（3）工作地点（4）薪资 （5）发布时间</p><p>任务要求</p><p>（1）使用urllib或requests库实现该网站网页源代码的获取，并将源代码进行保存；</p><p>（2）通过Xpath解析方法对保存的的源代码读取并进行解析，成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据保存到txt文本文件中。</p><p>这里使用的是Xpath，相对于之前猫眼电影使用的，这个较为简单，但是数据处理上较为复杂。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvfrom requests.exceptions import RequestExceptionfrom lxml import etreedef getHtmlText(url):    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69'            }    try:        result = requests.get(url,headers=headers,timeout=30)        result.raise_for_status()        result.encoding = result.apparent_encoding        return result.text    except:        return ""def parsePage(html):    ulist = []    clist = []    rlist = []    newhtml =etree.HTML(html,etree.HTMLParser())    result=newhtml.xpath('//*[@id="resultList"]/div[@class="el"]//text()')    for i in range(len(result)):        ulist.append(result[i].replace(" ","").replace('\r',"").replace("\n",''))    while '' in ulist:        ulist.remove('')    length = len(ulist)    weight = int(length / 5 )    for i in range(weight):        for j in range(5):            clist.append(ulist[i*5+j])        rlist.append(clist)        clist = []    return rlist# def txtdata(data):#     with open('top20.txt','w')as file:#         for i in data:#             for j in i:#                 print(j)#         print('successful')def storedata(data):    with open('top20.txt','w',encoding = 'utf-8')as file:        for i in data:            file.write(json.dumps(i,ensure_ascii=False)+'\n')        print('ok')def csvdata(data):    with open('top20.csv','w',encoding = 'utf-8',newline='')as csvfile:        fieldnames = ['职位名','公司名','工作地点','薪资','工作时间']        writer = csv.DictWriter(csvfile,fieldnames=fieldnames)        writer.writeheader()        for i in data:            writer.writerow({'职位名':i[0],'公司名':i[1],'工作地点':i[2],'薪资':i[3],'工作时间':i[4]})        print('ok')def main():    url="https://search.51job.com/list/120000,000000,0000,00,9,99,Python,2,1.html"    html=getHtmlText(url)    rlist=parsePage(html)#     txtdata(data)    storedata(rlist)    csvdata(rlist)main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能——mnist（手写识别）</title>
      <link href="/2018/12/09/ren-gong-zhi-neng-mnist-shou-xie-shi-bie/"/>
      <url>/2018/12/09/ren-gong-zhi-neng-mnist-shou-xie-shi-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能——mnist（手写识别）"><a href="#人工智能——mnist（手写识别）" class="headerlink" title="人工智能——mnist（手写识别）"></a>人工智能——mnist（手写识别）</h2><p>因为时间较久了，就不详细介绍了。<br>简单的说，一开始对已有的大量数字图片进行训练生成模型。然后通过对一张手写的数字图片进行读取，进入模型匹配，输出结果。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py"># Python3# 使用LeNet5的七层卷积神经网络用于MNIST手写数字识别import tensorflow as tffrom tensorflow.examples.tutorials.mnist import input_datamnist = input_data.read_data_sets("MNIST_data", one_hot=True)# 为输入图像和目标输出类别创建节点x = tf.placeholder(tf.float32, shape=[None, 784]) # 训练所需数据  占位符y_ = tf.placeholder(tf.float32, shape=[None, 10]) # 训练所需标签数据  占位符# *************** 构建多层卷积网络 *************** ## 权重、偏置、卷积及池化操作初始化,以避免在建立模型的时候反复做初始化操作def weight_variable(shape):  initial = tf.truncated_normal(shape, stddev=0.1) # 取随机值，符合均值为0，标准差stddev为0.1  return tf.Variable(initial)def bias_variable(shape):  initial = tf.constant(0.1, shape=shape)  return tf.Variable(initial)# x 的第一个参数为图片的数量，第二、三个参数分别为图片高度和宽度，第四个参数为图片通道数。# W 的前两个参数为卷积核尺寸，第三个参数为图像通道数，第四个参数为卷积核数量# strides为卷积步长，其第一、四个参数必须为1，因为卷积层的步长只对矩阵的长和宽有效# padding表示卷积的形式，即是否考虑边界。"SAME"是考虑边界，不足的时候用0去填充周围，"VALID"则不考虑def conv2d(x, W):  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')# x 参数的格式同tf.nn.conv2d中的x，ksize为池化层过滤器的尺度，strides为过滤器步长def max_pool_2x2(x):  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')#把x更改为4维张量，第1维代表样本数量，第2维和第3维代表图像长宽， 第4维代表图像通道数x_image = tf.reshape(x, [-1,28,28,1]) # -1表示任意数量的样本数,大小为28x28，深度为1的张量# 第一层：卷积W_conv1 = weight_variable([5, 5, 1, 32]) # 卷积在每个5x5的patch中算出32个特征。b_conv1 = bias_variable([32])h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)# 第二层：池化h_pool1 = max_pool_2x2(h_conv1)# 第三层：卷积W_conv2 = weight_variable([5, 5, 32, 64])b_conv2 = bias_variable([64])h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)# 第四层：池化h_pool2 = max_pool_2x2(h_conv2)# 第五层：全连接层W_fc1 = weight_variable([7 * 7 * 64, 1024])b_fc1 = bias_variable([1024])h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)# 在输出层之前加入dropout以减少过拟合keep_prob = tf.placeholder("float")h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)# 第六层：全连接层W_fc2 = weight_variable([1024, 10])b_fc2 = bias_variable([10])# 第七层：输出层y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)# *************** 训练和评估模型 *************** ## 为训练过程指定最小化误差用的损失函数，即目标类别和预测类别之间的交叉熵cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))# 使用反向传播，利用优化器使损失函数最小化train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)# 检测我们的预测是否真实标签匹配(索引位置一样表示匹配)# tf.argmax(y_conv,dimension), 返回最大数值的下标 通常和tf.equal()一起使用，计算模型准确度# dimension=0 按列找  dimension=1 按行找correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))# 统计测试准确率， 将correct_prediction的布尔值转换为浮点数来代表对、错，并取平均值。accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))saver = tf.train.Saver() # 定义saver# *************** 开始训练模型 *************** #with tf.Session() as sess:    sess.run(tf.global_variables_initializer())    for i in range(1000):      batch = mnist.train.next_batch(50)      if i%100 == 0:        # 评估模型准确度，此阶段不使用Dropout        train_accuracy = accuracy.eval(feed_dict={x:batch[0], y_: batch[1], keep_prob: 1.0})        print("step %d, training accuracy %g"%(i, train_accuracy))      # 训练模型，此阶段使用50%的Dropout      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})    saver.save(sess, './save/model.ckpt') #模型储存位置    print("test accuracy %g"%accuracy.eval(feed_dict={x: mnist.test.images [0:2000], y_: mnist.test.labels [0:2000], keep_prob: 1.0}))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写识别 </tag>
            
            <tag> mnist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式—LM3S1138介绍</title>
      <link href="/2018/12/09/qian-ru-shi-lm3s1138-jie-shao/"/>
      <url>/2018/12/09/qian-ru-shi-lm3s1138-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式—LM3S1138介绍"><a href="#嵌入式—LM3S1138介绍" class="headerlink" title="嵌入式—LM3S1138介绍"></a>嵌入式—LM3S1138介绍</h1><p>这是我用的较久的一款芯片，无论是电赛还是课程设计，兼容性都很好，现在想把所有数据整理一下，这是开发板的相关文档。后面会有相关代码介绍，和案例介绍。</p><p>EasyARM1138——内嵌 USB 仿真器的 Cortex-M3 开发板<br> EasyARM1138 是专门针对广大电子信息专业在校大学生而设计的一款基于 ARM<br>Cortex™-M3 先进内核的高性能、低价格开发板，用于教学、毕业设计、电子竞赛，等等。<br>也是广大单片机爱好者、开发工程师首选的 Cortex™-M3 开发板。<br> EasyARM1138 的核心MCU是美国Luminary Micro公司的Stellaris®（群星）系列ARM之<br>LM3S1138。该芯片采用的是国际上最优秀的MCU内核设计公司ARM最新推出的先进Cortex<br>™-M3 处理器；由国内最大、技术最强的晶圆制造公司台积电（TSMC）代工；经世界上最<br>专业的封装测试公司（OSE、i2a/IPAC）层层把关，确保产品的可靠性。Stellaris®（群星）</p><p>系列ARM芯片在电磁兼容性方面的优势明显。</p><h4 id="【产品图片】"><a href="#【产品图片】" class="headerlink" title="【产品图片】"></a>【产品图片】</h4><p><img src="https://img-blog.csdnimg.cn/2020052714052491.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="LM3S1138"></p><h4 id="【功能特点】"><a href="#【功能特点】" class="headerlink" title="【功能特点】"></a>【功能特点】</h4><p>● 强大的 MCU 内核<br> ◆ 32 位 ARM Cortex™-M3 内核（ARM v7M 架构）<br> ◆ 兼容 Thumb 的 Thumb-2 指令集，提高代码密度 25%以上<br> ◆ 50MHz 运行频率，1.25 DMIPS/MHz，加快 35%以上<br> ◆ 单周期乘法指令，2～12 周期硬件除法指令<br> ◆ 快速可嵌套中断，6～12 个时钟周期<br> ◆ 具有 MPU 保护设定访问规则<br> ◆ 64KB 单周期 Flash, 16KB 单周期 SRAM<br> ◆ 内置可编程的 LDO 输出 2.25V～2.75V，步进 50mV<br> ◆ 支持非对齐数据的访问，有效地压缩数据到内存<br> ◆ 支持位操作，最大限度使用内存，并提供创新的外设控制<br> ◆ 内置系统节拍定时器（SysTick），方便操作系统移植</p><h4 id="●-丰富的外设资源"><a href="#●-丰富的外设资源" class="headerlink" title="● 丰富的外设资源"></a>● 丰富的外设资源</h4><p> ◆ 7 组 GPIO，可配置为输入、输出、开漏、弱上拉等模式<br> ◆ 4 个 32 位 Timer，每个都可拆分为 2 个独立的 16 位子定时器，<br> 具有定时、捕获、PWM、RTC 等丰富功能<br> ◆ 3 路全双工 UART，位速率高达 3.125Mbps，16 单元接收 FIFO<br> 和发送 FIFO，支持串行红外协议（IrDA SIR）<br> ◆ 2 路I2C，支持 100kbps标准模式、400kbps快速模式<br> ◆ 2 路 SSI，兼容 Freescale SPI、MICROWIRE、Texas Instruments<br> 串行通信协议，位速率高达 25Mbps<br> ◆ 6 路 16 位 PWM，通过 CCP 管脚能产生高达 25MHz 的方波<br> ◆ 3 个模拟比较器<br> ◆ 8 通道 10 位 ADC，采样速率可达 1M/s，附带温度传感器<br> ◆ 内置看门狗定时器（WatchDog Timer），确保芯片可靠运行</p><h4 id="●-内嵌-USB-接口的下载仿真器"><a href="#●-内嵌-USB-接口的下载仿真器" class="headerlink" title="● 内嵌 USB 接口的下载仿真器"></a>● 内嵌 USB 接口的下载仿真器</h4><p> ◆ 仅需插入一根 USB 电缆就能实现“三合一”功能：<br> 5V 供电、程序下载与在线仿真、UART 串行通信<br> ◆ 不再要求电脑具有串口或并口，无论台式机还是笔记本电脑，<br> 只要拥有 USB 1.1 或 USB 2.0 接口就能运用自如<br> ◆ 除了能够下载仿真自身以外，保留的 JTAG 接口还可以<br> 用来仿真其它 LM3S 系列开发板，短接 JP2 短接器的<br>GND 和 U-RST，还可实现 JTAG 接口对内仿真功能<br> ◆ USB 接口提供虚拟 UART 的功能，不需要额外的接口电路</p><h4 id="●-简明的外围电路设计，调试时无需任何连线和跳线，操作极为方便"><a href="#●-简明的外围电路设计，调试时无需任何连线和跳线，操作极为方便" class="headerlink" title="● 简明的外围电路设计，调试时无需任何连线和跳线，操作极为方便"></a>● 简明的外围电路设计，调试时无需任何连线和跳线，操作极为方便</h4><p> ◆ 5 只 LED 指示灯<br> ◆ 3 只 KEY<br> ◆ 1 只交流蜂鸣器，可演奏动听乐曲，如《梁祝》<br> ◆ 两排插针引出全部 GPIO 资源，以及 ADC0～7、5V/3.3V/GND<br> ◆ GPIO 插针间距正好为 2000mil(50.8mm)，很容易插接在万用板<br> 或其它自制的电路板上，为教学实验提供了极大方便</p><h4 id="●-在软件上采用“C-语言＋驱动库”的新概念开发模式"><a href="#●-在软件上采用“C-语言＋驱动库”的新概念开发模式" class="headerlink" title="● 在软件上采用“C 语言＋驱动库”的新概念开发模式"></a>● 在软件上采用“C 语言＋驱动库”的新概念开发模式</h4><p> 由于 Luminary Micro 官方免费提供了基于 C 语言（符合 ANSI C 标准）的驱动库软件<br>包，并且源代码是公开的，因此用户完全可以摒弃晦涩难懂的汇编语言，也不需要掌握底层<br>寄存器的操作细节，只要懂 C 语言就能轻松玩转 LM3S 系列 ARM。这也使得 32 位 ARM 的<br>入门门槛大大降低。以下是操作 GPIO 端口点亮 LED 的示例，非常简捷：<br> SysCtlPeriEnable(SYSCTL_PERIPH_GPIOG); // 第 1 步：使能 GPIOG 端口<br>GPIOPinTypeOut(GPIO_PORTG_BASE , GPIO_PIN_3); // 第 2 步：设置 PG3 为输出<br>GPIOPinWrite(GPIO_PORTG_BASE , GPIO_PIN_3 , 0x00); // 第 3 步：令 PG3 = 0，点亮 LED </p><h4 id="●-从基础实验到课题设计"><a href="#●-从基础实验到课题设计" class="headerlink" title="● 从基础实验到课题设计"></a>● 从基础实验到课题设计</h4><p> ◆ GPIO 实验：LED 闪烁发光、GPIO 中断、按键控制<br> ◆ Timer 实验：定时/计数、脉冲捕获、RTC 时钟、PWM 方波<br> ◆ 串行通信：UART、I2C、SSI(兼容SPI)、RS-485<br>2<br>广州致远电子有限公司 电话：020-22644252 传真：020-38601859 <a href="http://www.embedtools.com" target="_blank" rel="noopener">http://www.embedtools.com</a><br> ◆ 串行红外通信实验（IrDA SIR）<br> ◆ 模拟功能：模拟比较器信号检测，10 位 ADC 数据采集<br> ◆ 片内温度传感器实验<br> ◆ 大容量 SD 卡读写实验<br> ◆ 支持各类电机实验：直流电机、步进电机、三相电机，<br> 提供运动控制 PID 算法<br> ◆ PWM 语音播放：能够对声音信号进行采集、存储和播放</p><h4 id="●-开发软件"><a href="#●-开发软件" class="headerlink" title="● 开发软件"></a>● 开发软件</h4><p> ◆ IAR Embedded Workbench for ARM 4.42A 或 5.11(内嵌 USB 下载仿真器，推荐)<br> ◆ Keil µVision3(无需 U-LINK 仿真器)<br> ◆ 支持 µC/OS II 操作系统(提供移植代码)<br> ◆ 提供《Stellaris 外设驱动库》快速安装方法及 C 语言源代码</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（PWM）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-pwm/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-pwm/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。</p><h4 id="pwm简介"><a href="#pwm简介" class="headerlink" title="pwm简介"></a>pwm简介</h4><p>　　脉冲宽度调制是利用微处理器的数字输出来对模拟电路进行控制的一种非常有效的技术，广泛应用在从测量、通信到功率控制与变换的许多领域中。</p><p>　　脉冲宽度调制是一种模拟控制方式，其根据相应载荷的变化来调制晶体管基极或MOS管栅极的偏置，来实现晶体管或MOS管导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。</p><p>　　PWM控制技术以其控制简单，灵活和动态响应好的优点而成为电力电子技术最广泛应用的控制方式，也是人们研究的热点。由于当今科学技术的发展已经没有了学科之间的界限，结合现代控制理论思想或实现无谐振波开关技术将会成为PWM控制技术发展的主要方向之一。其根据相应载荷的变化来调制晶体管基极或MOS管栅极的偏置，来实现晶体管或MOS管导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。　　</p><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;ctype.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span>  PART_LM3S1138</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;pin_map.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> T1A <span class="token punctuation">,</span> T1B <span class="token punctuation">,</span> T2A <span class="token punctuation">,</span> T2B <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Moto_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//³õÊ¼»¯µç»ú</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_TIMER1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//  Ê¹ÄÜTIMER1Ä£¿é</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_TIMER2<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//  Ê¹ÄÜTIMER2Ä£¿é</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>CCP2_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  Ê¹ÄÜCCP2ËùÔÚµÄGPIO¶Ë¿Ú</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>CCP3_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  Ê¹ÄÜCCP3ËùÔÚµÄGPIO¶Ë¿Ú</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>CCP4_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  Ê¹ÄÜCCP4ËùÔÚµÄGPIO¶Ë¿Ú</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>CCP5_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  Ê¹ÄÜCCP5ËùÔÚµÄGPIO¶Ë¿Ú</span>  <span class="token function">GPIOPinTypeTimer</span><span class="token punctuation">(</span>CCP2_PORT<span class="token punctuation">,</span> CCP2_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  ÉèÖÃÏà¹Ø¹Ü½ÅÎªTimer¹¦ÄÜ</span>  <span class="token function">GPIOPinTypeTimer</span><span class="token punctuation">(</span>CCP3_PORT<span class="token punctuation">,</span> CCP3_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  ÉèÖÃÏà¹Ø¹Ü½ÅÎªTimer¹¦ÄÜ</span>  <span class="token function">GPIOPinTypeTimer</span><span class="token punctuation">(</span>CCP4_PORT<span class="token punctuation">,</span> CCP4_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  ÉèÖÃÏà¹Ø¹Ü½ÅÎªTimer¹¦ÄÜ</span>  <span class="token function">GPIOPinTypeTimer</span><span class="token punctuation">(</span>CCP5_PORT<span class="token punctuation">,</span> CCP5_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  ÉèÖÃÏà¹Ø¹Ü½ÅÎªTimer¹¦ÄÜ</span>  <span class="token function">TimerConfigure</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_CFG_16_BIT_PAIR <span class="token operator">|</span>     <span class="token comment" spellcheck="true">//  ÅäÖÃTimerÎªË«16Î»PWM</span>                 TIMER_CFG_A_PWM <span class="token operator">|</span>                   TIMER_CFG_B_PWM<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerConfigure</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_CFG_16_BIT_PAIR <span class="token operator">|</span>     <span class="token comment" spellcheck="true">//  ÅäÖÃTimerÎªË«16Î»PWM</span>                 TIMER_CFG_A_PWM <span class="token operator">|</span>                   TIMER_CFG_B_PWM<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerControlLevel</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  ¿ØÖÆPWMÊä³ö·´Ïà</span>  <span class="token function">TimerControlLevel</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerLoadSet</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBoth³õÖµ</span>  <span class="token function">TimerLoadSet</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>  <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>  <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>  <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>  <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  Ê¹ÄÜTimer¼ÆÊý£¬PWM¿ªÊ¼Êä³ö</span>  <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_BOTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  Ö÷º¯Êý£¨³ÌÐòÈë¿Ú£©</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  ·ÀÖ¹JTAGÊ§Ð§£¬ÖØÒª£¡</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  Ê±ÖÓ³õÊ¼»¯£º¾§Õñ£¬6MHz</span>  <span class="token function">Moto_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> T1A<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>    <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER1_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> T1B<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ </span>    <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> T2A<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>    <span class="token function">TimerMatchSet</span><span class="token punctuation">(</span>TIMER2_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> T2B<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  ÉèÖÃTimerBÆ¥ÅäÖµ</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（定时器）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-ding-shi-qi/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-ding-shi-qi/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。</p><h4 id="Timer-总体特性"><a href="#Timer-总体特性" class="headerlink" title="Timer 总体特性"></a>Timer 总体特性</h4><p>在 Stellaris 系列 ARM 内部通常集成有 2～4 个通用定时器模块（General-Purpose Timer<br>Module，GPTM），分别称为 Timer0、Timer1、Timer2 和 Timer3。它们的用法是相同的：每 个 Timer 模块都可以配置为一个 32 位定时器或一个 32 位 RTC 定时器；也可以拆分为两个16 位的定时/计数器 TimerA 和 TimerB，它们可以被配置为独立运行的定时器、事件计数器或 PWM。</p><h4 id="Timer-模块具有非常丰富的功能："><a href="#Timer-模块具有非常丰富的功能：" class="headerlink" title="Timer 模块具有非常丰富的功能："></a>Timer 模块具有非常丰富的功能：</h4><h6 id="32-位定时器模式："><a href="#32-位定时器模式：" class="headerlink" title="32 位定时器模式："></a>32 位定时器模式：</h6><p>可编程单次触发（one-shot）定时器<br> 可编程周期（periodic）定时器<br> 实时时钟 RTC（Real Time Clock）  软件可控的事件暂停（用于单步调试时暂停计数，RTC 模式除外）</p><h6 id="16-位定时器模式："><a href="#16-位定时器模式：" class="headerlink" title="16 位定时器模式："></a>16 位定时器模式：</h6><p> 带 8 位预分频器的通用定时器功能<br> 可编程单次触发（one-shot）定时器<br> 可编程周期（periodic）定时器<br> 软件可控的事件暂停</p><h6 id="16-位输入捕获模式："><a href="#16-位输入捕获模式：" class="headerlink" title="16 位输入捕获模式："></a>16 位输入捕获模式：</h6><p> 输入边沿计数捕获<br> 输入边沿定时捕获</p><h6 id="16-位-PWM-模式："><a href="#16-位-PWM-模式：" class="headerlink" title="16 位 PWM 模式："></a>16 位 PWM 模式：</h6><p> 用法简单的 PWM（Pulse-Width Modulation，脉宽调制）模式<br> 可通过软件实现 PWM 信号周期、占空比、输出反相等的控制</p><h4 id="Timer-功能概述"><a href="#Timer-功能概述" class="headerlink" title="Timer 功能概述"></a>Timer 功能概述</h4><p>Timer 模块的功能在总体上可以分成 32 位模式和 16 位模式两大类。在 32 位模式下，TimerA 和 TimerB 被连在一起形成一个完整的 32 位计数器，对 Timer 的各项操作，如装载<br>初值、运行控制、中断控制等，都用对 TimerA 的操作作为总体上的 32 位控制，而对 TimerB的操作无任何效果。在 16 位模式下，对 TimerA 的操作仅对 TimerA 有效，对 TimerB 的操作仅对 TimerB 有效，即对两者的操控是完全独立进行的。</p><p>每一个 Timer 模块对应两个 CCP 管脚。CCP 是“Capture Compare PWM”的缩写，意为“捕获/比较/脉宽调制”。在 32 位单次触发和周期定时模式下，CCP 功能无效（与之复用的 GPIO 管脚功能仍然正常）。在 32 位 RTC 模式下，偶数 CCP 管脚（CCP0、CCP2、CCP4等）作为 RTC 时钟源的输入，而奇数 CCP 管脚（CCP1、CCP3、CCP5 等）无效。在 16 位模式下，计数捕获、定时捕获、PWM 功能都会用到 CCP 管脚，对应关系是：Timer0A 对应CCP0、Timer0B 对应 CCP1，Timer1A 对应 CCP2、Timer1B 对应 CCP3，依此类推。</p><h6 id="32-位单次触发-周期定时器"><a href="#32-位单次触发-周期定时器" class="headerlink" title="32 位单次触发/周期定时器"></a>32 位单次触发/周期定时器</h6><p>在这两种模式中，Timer 都被配置成一个 32 位的递减计数器，用法类似，只是单次触<br>发模式只能定时一次，如果需要再次定时则必须重新配置，而周期模式则可以周而复始地定<br>时，除非被关闭。在计数到 0x00000000 时，可以在软件的控制下触发中断或输出一个内部<br>的单时钟周期脉冲信号，该信号可以用来触发 ADC 采样。</p><h6 id="32-位-RTC-定时器"><a href="#32-位-RTC-定时器" class="headerlink" title="32 位 RTC 定时器"></a>32 位 RTC 定时器</h6><p>在该模式中，Timer 被配置成一个 32 位的递增计数器。<br>RTC 功能的时钟源来自偶数 CCP 管脚的输入。在 LM3S101/102 里，RTC 时钟信号从专<br>门的“32KHz”管脚输入。输入的时钟频率应当为精准的 32.768KHz，在芯片内部有一个<br>RTC 专用的预分频器，固定为 32768 分频。因此最终输入到 RTC 计数器的时钟频率正好是1Hz，即每过 1 秒钟 RTC 计数器增 1。RTC计数器从 0x00000000 开始计满需要 232秒，这是个极长的时间，有 136 年！因此RTC真正的用法是：初始化后不需要更改配置（调整时间或日期时例外），只需要修改匹配寄存器的值，而且要保证匹配值总是超前于当前计数值。每次匹配时可产生中断（如果中断已被使能），据此可以计算出当前的年月日、时分秒以及星期。在中断服务函数里应当重新设置匹配值，并且匹配值仍要超前于当前的计数值。<br>注意：在实际应用当中一般不会真正采用 Timer 模块的 RTC 功能来实现一个低功耗万<br>年历系统，因为芯片一旦出现复位或断电的情况就会清除 RTC 计数值。取而代之的是冬眠<br>模块（Hibernation Module）的 RTC 功能，由于采用了后备电池，因此不怕复位和 VDD 断<br>电，并且功耗很低。</p><h6 id="16-位单次触发-周期定时器"><a href="#16-位单次触发-周期定时器" class="headerlink" title="16 位单次触发/周期定时器"></a>16 位单次触发/周期定时器</h6><p>一个 32 位的 Timer 可以被拆分为两个单独运行的 16 位定时/计数器，每一个都可以被<br>配置成带 8 位预分频（可选功能）的 16 位递减计数器。如果使用 8 位预分频功能，则相当<br>于24位定时器。具体用法跟32位单次触发/周期定时模式类似，不同的是对TimerA和TimerB<br>的操作是分别独立进行的。</p><h6 id="16-位输入边沿计数捕获"><a href="#16-位输入边沿计数捕获" class="headerlink" title="16 位输入边沿计数捕获"></a>16 位输入边沿计数捕获</h6><p>在该模式中，TimerA 或 TimerB 被配置为能够捕获外部输入脉冲边沿事件的递减计数<br>器。共有 3 种边沿事件类型：正边沿、负边沿、双边沿。<br>该模式的工作过程是：设置装载值，并预设一个匹配值（应当小于装载值）；计数使能<br>后，在特定的 CCP 管脚每输入 1 个脉冲（正边沿、负边沿或双边沿有效），计数值就减 1；<br>当计数值与匹配值相等时停止运行并触发中断（如果中断已被使能）。如果需要再次捕获外<br>部脉冲，则要重新进行配置。</p><h6 id="16-位输入边沿定时捕获"><a href="#16-位输入边沿定时捕获" class="headerlink" title="16 位输入边沿定时捕获"></a>16 位输入边沿定时捕获</h6><p>在该模式中，TimerA 或 TimerB 被配置为自由运行的 16 位递减计数器，允许在输入信<br>号的上升沿或下降沿捕获事件。<br>该模式的工作过程是：设置装载值（默认为 0xFFFF）、捕获边沿类型；计数器被使能后<br>开始自由运行，从装载值开始递减计数，计数到 0 时重装初值，继续计数；如果从 CCP 管<br>脚上出现有效的输入脉冲边沿事件，则当前计数值被自动复制到一个特定的寄存器里，该值<br>会一直保存不变，直至遇到下一个有效输入边沿时被刷新。为了能够及时读取捕获到的计数<br>值，应当使能边沿事件捕获中断，并在中断服务函数里读取。</p><h6 id="16-位-PWM"><a href="#16-位-PWM" class="headerlink" title="16 位 PWM"></a>16 位 PWM</h6><p>Timer 模块还可以用来产生简单的 PWM 信号。在 Stellaris 系列 ARM 众多型号当中，<br>对于片内未集成专用 PWM 模块的，可以利用 Timer 模块的 16 位 PWM 功能来产生 PWM 信号，只不过功能较为简单。对于片内已集成专用 PWM 模块的，但仍然不够用时，则可以从Timer 模块借用。<br>在 PWM 模式中，TimerA 或 TimerB 被配置为 16 位的递减计数器，通过设置适当的装<br>载值（决定 PWM 周期）和匹配值（决定 PWM 占空比）来自动地产生 PWM 方波信号从相<br>应的 CCP 管脚输出。在软件上，还可以控制输出反相，参见函数 TimerControlLevel( )。</p><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token keyword">void</span> <span class="token function">Time_Init</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_TIMER0<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//  使能Timer模块</span>  <span class="token function">TimerConfigure</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_CFG_16_BIT_PAIR <span class="token operator">|</span>     <span class="token comment" spellcheck="true">//  配置Timer为16位周期定时器</span>                 TIMER_CFG_A_PERIODIC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerPrescaleSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  预先进行100分频</span>  <span class="token function">TimerLoadSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//  设置Timer初值，定时500ms</span>  <span class="token function">TimerIntEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_TIMA_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  使能Timer超时中断</span>  <span class="token function">IntEnable</span><span class="token punctuation">(</span>INT_TIMER0A<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">//  使能Timer中断</span>  <span class="token function">IntMasterEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  使能处理器中断</span>  <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_A<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  时钟初始化：晶振，6MHz</span>  <span class="token function">Time_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  定时器的中断服务函数</span><span class="token keyword">void</span> <span class="token function">Timer0A_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulStatus<span class="token punctuation">;</span>  ulStatus <span class="token operator">=</span> <span class="token function">TimerIntStatus</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  读取中断状态</span>  <span class="token function">TimerIntClear</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> ulStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//  清除中断状态，重要！</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> TIMER_TIMA_TIMEOUT<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">//  如果是Timer超时中断</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="startup-ewarm-c"><a href="#startup-ewarm-c" class="headerlink" title="startup_ewarm.c"></a>startup_ewarm.c</h4><p><img src="https://img-blog.csdnimg.cn/20200527144643231.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527144734585.png" alt="在这里插入图片描述"></p><p>这些是要改的部分。</p><p>具体的就不讲解了，地址后期会附上。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（UART2A）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-uart2a/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-uart2a/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。</p><h4 id="UART-简介"><a href="#UART-简介" class="headerlink" title="UART 简介"></a>UART 简介</h4><p>计算机与外部设备的连接，基本上使用了两类接口：串行接口与并行接口。并行接口是<br>指数据的各个位同时进行传送，其特点是传输速度块，但当传输距离远、位数又多时，通信<br>线路变复杂且成本提高。串行通信是指数据一位位地顺序传送，其特点是适合于远距离通信，<br>通信线路简单，只要一对传输线就可以实现双向通信，从而大大降低了成本。<br>串行通信又分为异步与同步两类。UART（Universal Asynchronous Receiver/Transmitter，<br>通用异步收发器）正是设备间进行异步通信的关键模块。它的重要作用如下所示：</p><ul><li>处理数据总路线和串行口之间的串/并、并/串转换；</li><li>通信双方只要采用相同的帧格式和波特率，就能在未共享时钟信号的情况下，仅用<br>两根信号线（Rx 和 Tx）就可以完成通信过程；</li><li>采用异步方式，数据收发完毕后，可通过中断或置位标志位的方式通知微控制器进<br>行处理，大大提高微控制器的工作效率。</li><li>若加入一个合适的电平转换器，如 SP3232E、SP3485，UART 还能用于 RS-232、RS-485<br>通信，或与计算机的端口连接。UART 应用非常广泛，手机、工业控制、PC 等应用中都要<br>用到 UART。</li></ul><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;uart.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;ctype.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"uartGetPut.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span>  PART_LM3S1138</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;pin_map.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">char</span> Num <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  时钟初始化：晶振，6MHz</span>  <span class="token function">uartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  UART初始化</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">UART2_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulStatus<span class="token punctuation">;</span>  ulStatus <span class="token operator">=</span> <span class="token function">UARTIntStatus</span><span class="token punctuation">(</span>UART2_BASE<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  读取当前中断状态</span>  <span class="token function">UARTIntClear</span><span class="token punctuation">(</span>UART2_BASE<span class="token punctuation">,</span> ulStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//  清除中断状态</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> UART_INT_RX<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> UART_INT_RT<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  若是接收中断或者</span>  <span class="token punctuation">{</span>      Num <span class="token operator">=</span> <span class="token function">UARTCharGet</span><span class="token punctuation">(</span>UART2_BASE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//  等待接收字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Num <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                      <span class="token comment" spellcheck="true">//  如果遇到a&lt;CR></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="startup-ewarm-c（修改优先级）"><a href="#startup-ewarm-c（修改优先级）" class="headerlink" title="startup_ewarm.c（修改优先级）"></a>startup_ewarm.c（修改优先级）</h4><p><img src="https://img-blog.csdnimg.cn/20200527142324941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527142359362.png" alt="在这里插入图片描述"></p><p>这些是要改的部分。</p><p>具体的就不讲解了，地址后期会附上</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> UART2A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（陀螺仪6050+UART）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-tuo-luo-yi-6050-uart/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-tuo-luo-yi-6050-uart/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。</p><h4 id="MPU-6050-简介"><a href="#MPU-6050-简介" class="headerlink" title="MPU-6050 简介"></a>MPU-6050 简介</h4><p>供电电源：3-5v（内部低压差稳压）</p><p>通信方式：标准IIC通信协议</p><p>芯片内置16bit AD转换器,16位数据输出</p><p>陀螺仪范围：±250 500 1000 2000 °/s</p><p>加速度范围：±2±4±8±16g</p><p>MPU-6000（MPU-6000数据手册）为全球首例整合性6轴运动处理组件，相较于多组件方案，免除了组合陀螺仪与加速器时之轴间差的问题，减少了大量的包装空间。MPU-6000整合了3轴陀螺仪、3轴加速器，并含可藉由第二个I2C端口连接其他厂牌之加速器、磁力传感器、或其他传感器的数位运动处理(DMP: Digital Motion Processor)硬件加速引擎，由主要I2C端口以单一数据流的形式，向应用端输出完整的9轴融合演算技术</p><p>InvenSense的运动处理资料库，可处理运动感测的复杂数据，降低了运动处理运算对操作系统的负荷，并为应用开发提供架构化的API。</p><p>MPU-6000的角速度全格感测范围为±250、±500、±1000与±2000°/sec (dps)，可准确追緃快速与慢速动作，并且，用户可程式控制的加速器全格感测范围为±2g、±4g±8g与±16g。产品传输可透过最高至400kHz的I2C或最高达20MHz的SPI。</p><p>MPU-6000可在不同电压下工作，VDD供电电压介为2.5V±5%、3.0V±5%或3.3V±5%，逻辑接口VVDIO供电为1.8V± 5%。MPU-6000的包装尺寸4x4x0.9mm(QFN)，在业界是革命性的尺寸。其他的特征包含内建的温度感测器、包含在运作环境中仅有±1%变动的振荡器。</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>以数字输出6轴或9轴的旋转矩阵、四元数(quaternion)、欧拉角格式(Euler Angle forma)的融合演算数据。</li><li>具有131 LSBs/°/sec 敏感度与全格感测范围为±250、±500、±1000与±2000°/sec 的3轴角速度感测器(陀螺仪)。</li><li>可程式控制，且程式控制范围为±2g、±4g、±8g和±16g的3轴加速器。</li><li>移除加速器与陀螺仪轴间敏感度，降低设定给予的影响与感测器的飘移。</li><li>数字运动处理(DMP: Digital Motion Processing)引擎可减少复杂的融合演算数据、感测器同步化、姿势感应等的负荷。</li><li>运动处理数据库支持Android、Linux与Windows</li><li>内建之运作时间偏差与磁力感测器校正演算技术，免除了客户须另外进行校正的需求。</li><li>以数位输出的温度传感器</li><li>以数位输入的同步引脚(Sync pin)支援视频电子影相稳定技术与GPS</li><li>可程式控制的中断(interrupt)支援姿势识别、摇摄、画面放大缩小、滚动、快速下降中断、high-G中断、零动作感应、触击感应、摇动感应功能。</li><li>VDD供电电压为2.5V±5%、3.0V±5%、3.3V±5%；VDDIO为1.8V± 5%</li><li>陀螺仪运作电流：5mA，陀螺仪待命电流：5A；加速器运作电流：350A，加速器省电模式电流： 20A@10Hz</li><li>高达400kHz快速模式的I2C，或最高至20MHz的SPI串行主机接口(serial host interface)</li><li>内建频率产生器在所有温度范围(full temperature range)仅有±1%频率变化。</li><li>使用者亲自测试</li><li>10,000 g 碰撞容忍度</li><li>为可携式产品量身订作的最小最薄包装 (4x4x0.9mm QFN)</li></ul><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;uart.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;ctype.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"uartGetPut.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;adc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span>  PART_LM3S1138</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;pin_map.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Re_buf<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ucStra<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ucStrw<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ucStrAngle<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> Value<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">255</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DataTreating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//float Value[8];</span>  <span class="token comment" spellcheck="true">//    char a[40];</span>  <span class="token comment" spellcheck="true">//    char b[40];</span>  <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStra<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStra<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStra<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStra<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStra<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStra<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrw<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrw<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrw<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrw<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrw<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrw<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrAngle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrAngle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrAngle<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>  Value<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ucStrAngle<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> ucStrAngle<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//sprintf(a,"加速度是x:%.2f y:%.2f z:%.2f \r\n",Value[0],Value[1],Value[2]);</span>  <span class="token comment" spellcheck="true">//  sprintf(b,"角速度是x:%.2f y:%.2f z:%.2f \r\n",Value[3],Value[4],Value[5]);</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token string">"角度是x:%.2f y:%.2f z:%.2f \r\n"</span><span class="token punctuation">,</span>Value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Value<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Value<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//uartPuts(a);</span>  <span class="token comment" spellcheck="true">// uartPuts(b);</span>  <span class="token function">uartPuts</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//float Value[8];</span>  <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  时钟初始化：晶振，6MHz</span>  <span class="token function">uartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  UART初始化</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DataTreating</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  UART2中断服务函数</span><span class="token keyword">void</span> <span class="token function">UART0_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulStatus<span class="token punctuation">;</span>  ulStatus <span class="token operator">=</span> <span class="token function">UARTIntStatus</span><span class="token punctuation">(</span>UART0_BASE<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  读取当前中断状态</span>  <span class="token function">UARTIntClear</span><span class="token punctuation">(</span>UART0_BASE<span class="token punctuation">,</span> ulStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//  清除中断状态</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> UART_INT_RX<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> UART_INT_RT<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  若是接收中断或者</span>  <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>Re_buf<span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">uartGetc0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>Re_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0x55</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//第0号数据不是帧头</span>  counter<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//接收到11个数据</span>  <span class="token punctuation">{</span>        counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//重新赋值，准备下一帧数据的接收        </span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Re_buf <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0x51</span><span class="token punctuation">:</span>      ucStra<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStra<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStra<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStra<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStra<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStra<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0x52</span><span class="token punctuation">:</span>           ucStrw<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrw<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrw<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrw<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrw<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrw<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0x53</span><span class="token punctuation">:</span>       ucStrAngle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrAngle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrAngle<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrAngle<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ucStrAngle<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>Re_buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//DataTreating();</span>  <span class="token punctuation">}</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="startup-ewarm-c（修改优先级）"><a href="#startup-ewarm-c（修改优先级）" class="headerlink" title="startup_ewarm.c（修改优先级）"></a>startup_ewarm.c（修改优先级）</h4><p><img src="https://img-blog.csdnimg.cn/20200527150627177.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527150638346.png" alt="在这里插入图片描述"><br>这里用的是UART0 传输文件。</p><p>具体的就不讲解了，地址后期会附上</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 陀螺仪6050 </tag>
            
            <tag> UART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——电赛2019—纸张计数（F题）</title>
      <link href="/2018/12/09/qian-ru-shi-dian-sai-2019-zhi-zhang-ji-shu-f-ti/"/>
      <url>/2018/12/09/qian-ru-shi-dian-sai-2019-zhi-zhang-ji-shu-f-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527160649452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527161146629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这次比赛我们使用的FDC2214。</p><p>简单的说一下吧，我们做这个比赛时写的方法，自检计数，比较最近数值。至于比赛名次省一，多了不想说了。》》》》》》。。。。。。。。。。。</p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;uart.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"SoftI2C.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"SoftI2C_CFG.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"uartGetPut.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"FDC2214.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"lcd_driver.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"ZLG7290.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"buzzer.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span>  PART_LM3S1138</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;pin_map.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"KEY.H"</span></span><span class="token comment" spellcheck="true">//  将较长的标识符定义成较短的形式</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriEnable       SysCtlPeripheralEnable</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriDisable      SysCtlPeripheralDisable</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeIn          GPIOPinTypeGPIOInput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOut         GPIOPinTypeGPIOOutput</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_1                  GPIOPinRead(GPIO_PORTE_BASE , GPIO_PIN_0)</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_2                  GPIOPinRead(GPIO_PORTE_BASE , GPIO_PIN_1)</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_3                  GPIOPinRead(GPIO_PORTD_BASE , GPIO_PIN_3)</span><span class="token comment" spellcheck="true">//  定义KEY</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PERIPH             SYSCTL_PERIPH_GPIOG</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PORT               GPIO_PORTG_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PIN                GPIO_PIN_5</span><span class="token keyword">int</span> T1 <span class="token punctuation">,</span> T2 <span class="token punctuation">,</span> T3 <span class="token punctuation">,</span> T4 <span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> Real_Num <span class="token punctuation">,</span> Step_All <span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Data_Mar<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">int</span> Ans_Data <span class="token punctuation">;</span><span class="token keyword">double</span> comPare<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">Data_N</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> Array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Time_Init</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_GPIOD<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  使能iic所在的GPIO端口</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTD_BASE<span class="token punctuation">,</span> GPIO_PIN_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTD_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_GPIOE<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  使能iic所在的GPIO端口</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_1<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_TIMER0<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//  使能Timer模块</span>  <span class="token function">TimerConfigure</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_CFG_16_BIT_PAIR <span class="token operator">|</span>     <span class="token comment" spellcheck="true">//  配置Timer为16位周期定时器</span>                 TIMER_CFG_B_PERIODIC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerPrescaleSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  预先进行100分频</span>  <span class="token function">TimerLoadSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//  设置Timer初值，定时500ms</span>  <span class="token function">TimerIntEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_TIMB_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  使能Timer超时中断</span>  <span class="token function">IntEnable</span><span class="token punctuation">(</span>INT_TIMER0B<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">//  使能Timer中断</span>  <span class="token function">IntMasterEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  使能处理器中断</span>  <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  时钟初始化：晶振，6MHz</span>  <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">uartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init_lcd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Time_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">buzzerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  蜂鸣器初始化</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FDC2214_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">uartPuts</span><span class="token punctuation">(</span><span class="token string">"初始化成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  初始化成功！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SysCtlDelay</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>TheSysClock <span class="token operator">/</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">uartPuts</span><span class="token punctuation">(</span><span class="token string">"初始化失败请检查系统后重启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  初始化失败！  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"请检查系统后重启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"实现自检功能： 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"实现自检功能： 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"测试纸张功能： 2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:  3 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">int</span> N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>N3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token keyword">int</span> Step <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> i <span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> Real_Num <span class="token operator">></span> <span class="token number">50000</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                                  <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">buzzerSound</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  蜂鸣器发出2000Hz声音</span>          <span class="token function">SysCtlDelay</span><span class="token punctuation">(</span><span class="token number">800</span> <span class="token operator">*</span> <span class="token punctuation">(</span>TheSysClock <span class="token operator">/</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//  延时约800ms</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                                  <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">buzzerQuiet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//  蜂鸣器静音</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"确认纸的值：   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键2 开始记录1          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Real_Num <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d  %d  "</span><span class="token punctuation">,</span> Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d 页记录成功    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> Step <span class="token operator">>=</span> <span class="token number">10</span>  <span class="token punctuation">)</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d页记录成功    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          Step <span class="token operator">++</span> <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          Step <span class="token operator">++</span> <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d 页开始记录    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> Step <span class="token operator">>=</span> <span class="token number">10</span>  <span class="token punctuation">)</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d页开始记录    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          Step_All <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          N3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>          N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"自检成功          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"一秒后回主页面 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Step_All <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d  %d  \r\n"</span><span class="token punctuation">,</span> Data_Mar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>Data_Mar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token function">Data_N</span> <span class="token punctuation">(</span> Data_Mar <span class="token punctuation">,</span> Step_All   <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Step_All <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d %lf   \r\n"</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> comPare<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          N3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">1</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>Err_1 <span class="token punctuation">,</span> Err_2 <span class="token punctuation">,</span> Ans <span class="token punctuation">,</span> Error <span class="token punctuation">,</span> N4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"最大纸的页数：%d"</span><span class="token punctuation">,</span> Step_All <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键1 开始检测          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>             N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              N2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> Error <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> Error <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> Step_All <span class="token punctuation">;</span> Error  <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>Error<span class="token punctuation">]</span> <span class="token operator">>=</span>  Real_Num <span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          Err_1 <span class="token operator">=</span> comPare<span class="token punctuation">[</span>Error<span class="token punctuation">]</span> <span class="token operator">-</span> Real_Num <span class="token punctuation">;</span>          Err_2 <span class="token operator">=</span> Real_Num <span class="token operator">-</span> comPare<span class="token punctuation">[</span>Error <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>          Ans <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Err_1 <span class="token operator">>=</span> Err_2 <span class="token operator">?</span> <span class="token punctuation">(</span> Error <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> Error <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"页数为: %d张    "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> Ans <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"按键2 退出          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              N4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> K1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> K2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> K3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> K1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          K1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键1 开始检测          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> K2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span> K2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            K2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              K2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//卡纸：8441  信纸：7389  作业纸：7706</span><span class="token comment" spellcheck="true">/*          if(){                                               disp_line(1,"      卡纸      ");            disp_line(3,"按键2 退出          ");          }          else if(){            disp_line(1,"      信纸      ");            disp_line(3,"按键2 退出          ");          }          else if(){            disp_line(1,"     作业纸     ");            disp_line(3,"按键2 退出          ");          }*/</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              K3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> K3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span>  <span class="token function">Data_N</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> Array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> m  <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> Num_B <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">,</span> Num_A <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m  <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>    Num_B <span class="token operator">=</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    Num_A <span class="token operator">=</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    comPare<span class="token punctuation">[</span>Num_B<span class="token punctuation">]</span> <span class="token operator">=</span> Num_A <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    comPare<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m  <span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> Num_Left <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> Num_right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> k2 <span class="token operator">=</span> <span class="token number">0</span>   <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> k1 <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>  <span class="token punctuation">;</span> k1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> k1 <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          Num_Left <span class="token operator">=</span> comPare<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> Num_Left <span class="token operator">==</span> <span class="token number">0</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>        Num_Left <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> k2 <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>m <span class="token punctuation">;</span> k2 <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          Num_right <span class="token operator">=</span> comPare<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token punctuation">;</span>          <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> Num_right <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> comPare<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Num_Left <span class="token operator">+</span> Num_right <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>  <span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  定时器的中断服务函数</span><span class="token keyword">void</span> <span class="token function">Timer0B_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulStatus<span class="token punctuation">;</span>  ulStatus <span class="token operator">=</span> <span class="token function">TimerIntStatus</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  读取中断状态</span>  <span class="token function">TimerIntClear</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> ulStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//  清除中断状态，重要！</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> TIMER_TIMB_TIMEOUT<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">//  如果是Timer超时中断</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 电赛 </tag>
            
            <tag> 纸张计数 </tag>
            
            <tag> 2214 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（自带按键）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-zi-dai-an-jian/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-zi-dai-an-jian/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。</p><p>这个没什么好讲的，就是自带的几个按键使用罢了。不想外接用这个。</p><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//  基于《Stellaris外设驱动库》的例程：交流蜂鸣器发出、按键控制LED</span><span class="token comment" spellcheck="true">//  包含必要的头文件</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"KEY.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_memmap.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_sysctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_gpio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;sysctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;gpio.h></span></span><span class="token comment" spellcheck="true">//  将较长的标识符定义成较短的形式</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriEnable       SysCtlPeripheralEnable</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriDisable      SysCtlPeripheralDisable</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeIn          GPIOPinTypeGPIOInput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOut         GPIOPinTypeGPIOOutput</span><span class="token comment" spellcheck="true">//  定义KEY</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PERIPH             SYSCTL_PERIPH_GPIOG</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PORT               GPIO_PORTG_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PIN                GPIO_PIN_5</span><span class="token comment" spellcheck="true">//  防止JTAG失效</span><span class="token keyword">void</span>  <span class="token function">JTAG_Wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>KEY_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//  使能KEY所在的GPIO端口</span>    <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>KEY_PORT <span class="token punctuation">,</span> KEY_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  设置KEY所在管脚为输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">GPIOPinRead</span><span class="token punctuation">(</span>KEY_PORT <span class="token punctuation">,</span> KEY_PIN<span class="token punctuation">)</span>  <span class="token operator">==</span>  <span class="token number">0x00</span> <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//  如果复位时按下KEY，则进入</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//  死循环，以等待JTAG连接</span>    <span class="token punctuation">}</span>    <span class="token function">SysCtlPeriDisable</span><span class="token punctuation">(</span>KEY_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//  禁止KEY所在的GPIO端口</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  定义全局的系统时钟变量</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span>  TheSysClock  <span class="token operator">=</span>  <span class="token number">12000000UL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  延时</span><span class="token keyword">void</span>  <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulVal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">--</span>ulVal  <span class="token operator">!=</span>  <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  系统初始化</span><span class="token keyword">void</span>  <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*    SysCtlLDOSet(SYSCTL_LDO_2_50V);                             //  设置LDO输出电压    SysCtlClockSet(SYSCTL_USE_OSC |                             //  系统时钟设置，采用主振荡器                   SYSCTL_OSC_MAIN |                   SYSCTL_XTAL_6MHZ |                   SYSCTL_SYSDIV_1);*/</span>    <span class="token function">SysCtlLDOSet</span><span class="token punctuation">(</span>SYSCTL_LDO_2_75V<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">//  配置PLL前将LDO电压设置为2.75V</span>    <span class="token function">SysCtlClockSet</span><span class="token punctuation">(</span>SYSCTL_USE_PLL <span class="token operator">|</span>                             <span class="token comment" spellcheck="true">//  系统时钟设置，采用PLL</span>                   SYSCTL_OSC_MAIN <span class="token operator">|</span>                            <span class="token comment" spellcheck="true">//  主振荡器</span>                   SYSCTL_XTAL_6MHZ <span class="token operator">|</span>                           <span class="token comment" spellcheck="true">//  外接6MHz晶振</span>                   SYSCTL_SYSDIV_4<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//  分频结果为50MHz</span>    TheSysClock  <span class="token operator">=</span>  <span class="token function">SysCtlClockGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  获取系统时钟，单位：Hz</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span>KEY1 <span class="token operator">|</span> KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  KEY初始化</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">JTAG_Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>    <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//  系统初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">KEY_Get</span><span class="token punctuation">(</span>KEY1 <span class="token operator">|</span> KEY2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的不用改。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 自带按键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——电赛—电动车跷跷板（F题）</title>
      <link href="/2018/12/09/qian-ru-shi-dian-sai-dian-dong-che-qiao-qiao-ban-f-ti/"/>
      <url>/2018/12/09/qian-ru-shi-dian-sai-dian-dong-che-qiao-qiao-ban-f-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527164142158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527164207698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200527164224278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;uart.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"SoftI2C.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"SoftI2C_CFG.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"uartGetPut.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"FDC2214.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"lcd_driver.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"ZLG7290.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"buzzer.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span>  PART_LM3S1138</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;pin_map.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"systemInit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;timer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"KEY.H"</span></span><span class="token comment" spellcheck="true">//  将较长的标识符定义成较短的形式</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriEnable       SysCtlPeripheralEnable</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriDisable      SysCtlPeripheralDisable</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeIn          GPIOPinTypeGPIOInput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOut         GPIOPinTypeGPIOOutput</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_1                  GPIOPinRead(GPIO_PORTE_BASE , GPIO_PIN_0)</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_2                  GPIOPinRead(GPIO_PORTE_BASE , GPIO_PIN_1)</span><span class="token macro property">#<span class="token directive keyword">define</span>  Key_3                  GPIOPinRead(GPIO_PORTD_BASE , GPIO_PIN_3)</span><span class="token comment" spellcheck="true">//  定义KEY</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PERIPH             SYSCTL_PERIPH_GPIOG</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PORT               GPIO_PORTG_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PIN                GPIO_PIN_5</span><span class="token keyword">int</span> T1 <span class="token punctuation">,</span> T2 <span class="token punctuation">,</span> T3 <span class="token punctuation">,</span> T4 <span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> Real_Num <span class="token punctuation">,</span> Step_All <span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Data_Mar<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">int</span> Ans_Data <span class="token punctuation">;</span><span class="token keyword">double</span> comPare<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">Data_N</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> Array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Time_Init</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_GPIOD<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  使能iic所在的GPIO端口</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTD_BASE<span class="token punctuation">,</span> GPIO_PIN_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTD_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_GPIOE<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  使能iic所在的GPIO端口</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_1<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//  设置iic所在管脚为输入</span>  <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_3<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_TIMER0<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//  使能Timer模块</span>  <span class="token function">TimerConfigure</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_CFG_16_BIT_PAIR <span class="token operator">|</span>     <span class="token comment" spellcheck="true">//  配置Timer为16位周期定时器</span>                 TIMER_CFG_B_PERIODIC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TimerPrescaleSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  预先进行100分频</span>  <span class="token function">TimerLoadSet</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//  设置Timer初值，定时500ms</span>  <span class="token function">TimerIntEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_TIMB_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  使能Timer超时中断</span>  <span class="token function">IntEnable</span><span class="token punctuation">(</span>INT_TIMER0B<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">//  使能Timer中断</span>  <span class="token function">IntMasterEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  使能处理器中断</span>  <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  主函数（程序入口）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">jtagWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>  <span class="token function">clockInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//  时钟初始化：晶振，6MHz</span>  <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">uartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init_lcd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Time_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">buzzerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  蜂鸣器初始化</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FDC2214_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">uartPuts</span><span class="token punctuation">(</span><span class="token string">"初始化成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  初始化成功！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SysCtlDelay</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>TheSysClock <span class="token operator">/</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">uartPuts</span><span class="token punctuation">(</span><span class="token string">"初始化失败请检查系统后重启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  初始化失败！  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"请检查系统后重启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"实现自检功能： 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"实现自检功能： 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"测试纸张功能： 2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:  3 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">int</span> N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>N3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token keyword">int</span> Step <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> i <span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span> T1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> Real_Num <span class="token operator">></span> <span class="token number">50000</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                                  <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">buzzerSound</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//  蜂鸣器发出2000Hz声音</span>          <span class="token function">SysCtlDelay</span><span class="token punctuation">(</span><span class="token number">800</span> <span class="token operator">*</span> <span class="token punctuation">(</span>TheSysClock <span class="token operator">/</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//  延时约800ms</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                                  <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span> GPIO_PORTE_BASE<span class="token punctuation">,</span> GPIO_PIN_2<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">buzzerQuiet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//  蜂鸣器静音</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"确认纸的值：   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键2 开始记录1          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Real_Num <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d  %d  "</span><span class="token punctuation">,</span> Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d 页记录成功    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> Step <span class="token operator">>=</span> <span class="token number">10</span>  <span class="token punctuation">)</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d页记录成功    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          Step <span class="token operator">++</span> <span class="token punctuation">;</span>          Data_Mar<span class="token punctuation">[</span>Step<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          Step <span class="token operator">++</span> <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d 页开始记录    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> Step <span class="token operator">>=</span> <span class="token number">10</span>  <span class="token punctuation">)</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"第%d页开始记录    "</span><span class="token punctuation">,</span> Step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          Step_All <span class="token operator">=</span> Step  <span class="token punctuation">;</span>          N3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>          N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"自检成功          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"一秒后回主页面 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Step_All <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d  %d  \r\n"</span><span class="token punctuation">,</span> Data_Mar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>Data_Mar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token function">Data_N</span> <span class="token punctuation">(</span> Data_Mar <span class="token punctuation">,</span> Step_All   <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Step_All <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%d %lf   \r\n"</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> comPare<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>          N3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">1</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> N1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>Err_1 <span class="token punctuation">,</span> Err_2 <span class="token punctuation">,</span> Ans <span class="token punctuation">,</span> Error <span class="token punctuation">,</span> N4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> T2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          N1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"最大纸的页数：%d"</span><span class="token punctuation">,</span> Step_All <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键1 开始检测          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span> N2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>             N2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              N2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> Error <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> Error <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> Step_All <span class="token punctuation">;</span> Error  <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>Error<span class="token punctuation">]</span> <span class="token operator">>=</span>  Real_Num <span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          Err_1 <span class="token operator">=</span> comPare<span class="token punctuation">[</span>Error<span class="token punctuation">]</span> <span class="token operator">-</span> Real_Num <span class="token punctuation">;</span>          Err_2 <span class="token operator">=</span> Real_Num <span class="token operator">-</span> comPare<span class="token punctuation">[</span>Error <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>          Ans <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Err_1 <span class="token operator">>=</span> Err_2 <span class="token operator">?</span> <span class="token punctuation">(</span> Error <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> Error <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"页数为: %d张    "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> Ans <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"按键2 退出          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              N4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> N4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> K1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> K2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> K3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token function">TimerDisable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> T4 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> K1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          K1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"纸张类型测量:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"按键1 开始检测          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> K2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span> K2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FDC2214_GetChannelData</span><span class="token punctuation">(</span>FDC2214_Channel_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            Real_Num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> k <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"电容量：%d\r\n"</span><span class="token punctuation">,</span> Real_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">uartPuts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            K2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              K2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//卡纸：8441  信纸：7389  作业纸：7706</span><span class="token comment" spellcheck="true">/*          if(){                                               disp_line(1,"      卡纸      ");            disp_line(3,"按键2 退出          ");          }          else if(){            disp_line(1,"      信纸      ");            disp_line(3,"按键2 退出          ");          }          else if(){            disp_line(1,"     作业纸     ");            disp_line(3,"按键2 退出          ");          }*/</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              K3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> K3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>              T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T3 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>              <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token function">TimerEnable</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> TIMER_B<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//  使能Timer计数</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span>  <span class="token function">Data_N</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> Array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> m  <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> Num_B <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">,</span> Num_A <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m  <span class="token punctuation">;</span> i <span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>    Num_B <span class="token operator">=</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    Num_A <span class="token operator">=</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    comPare<span class="token punctuation">[</span>Num_B<span class="token punctuation">]</span> <span class="token operator">=</span> Num_A <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    comPare<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m  <span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> Num_Left <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> Num_right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> k2 <span class="token operator">=</span> <span class="token number">0</span>   <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> k1 <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>  <span class="token punctuation">;</span> k1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> k1 <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          Num_Left <span class="token operator">=</span> comPare<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> Num_Left <span class="token operator">==</span> <span class="token number">0</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span>        Num_Left <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> k2 <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>m <span class="token punctuation">;</span> k2 <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> comPare<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          Num_right <span class="token operator">=</span> comPare<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token punctuation">;</span>          <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> Num_right <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> comPare<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        comPare<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Num_Left <span class="token operator">+</span> Num_right <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>  <span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  定时器的中断服务函数</span><span class="token keyword">void</span> <span class="token function">Timer0B_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulStatus<span class="token punctuation">;</span>  ulStatus <span class="token operator">=</span> <span class="token function">TimerIntStatus</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  读取中断状态</span>  <span class="token function">TimerIntClear</span><span class="token punctuation">(</span>TIMER0_BASE<span class="token punctuation">,</span> ulStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//  清除中断状态，重要！</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ulStatus <span class="token operator">&amp;</span> TIMER_TIMB_TIMEOUT<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">//  如果是Timer超时中断</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>  Key_1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> Key_3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      T1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      T4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 电赛 </tag>
            
            <tag> 电动车跷跷板 </tag>
            
            <tag> 6050 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法——最长公共子序列</title>
      <link href="/2018/12/09/suan-fa-zui-chang-gong-gong-zi-xu-lie/"/>
      <url>/2018/12/09/suan-fa-zui-chang-gong-gong-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="算法——最长公共子序列"><a href="#算法——最长公共子序列" class="headerlink" title="算法——最长公共子序列"></a>算法——最长公共子序列</h2><p>链接：<a href="https://ac.nowcoder.com/acm/problem/19978" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/19978</a></p><p>来源：牛客网</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。<br>令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列 &lt; i0，i1，…，ik-1 &gt; ，使得对所有的j=0，1，…，k-1，有xij = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><p>第1行为第1个字符序列，都是大写字母组成，以”.”结束。长度小于5000。<br>第2行为第2个字符序列，都是大写字母组成，以”.”结束，长度小于5000。</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><p>第1行输出上述两个最长公共子序列的长度。<br>第2行输出所有可能出现的最长公共子序列个数，答案可能很大，只要将答案对100,000,000求余即可。</p><p><img src="https://img-blog.csdnimg.cn/20200424073104637.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 5010</span><span class="token macro property">#<span class="token directive keyword">define</span> mod 100000000</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span>A<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>B<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>A<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>B<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>d<span class="token operator">=</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>d<span class="token operator">^</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>            g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共子序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——古诗文网中验证码（超级鹰）</title>
      <link href="/2018/12/09/wang-luo-pa-chong-gu-shi-wen-wang-zhong-yan-zheng-ma-chao-ji-ying/"/>
      <url>/2018/12/09/wang-luo-pa-chong-gu-shi-wen-wang-zhong-yan-zheng-ma-chao-ji-ying/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——古诗文网中验证码（超级鹰）"><a href="#网络爬虫——古诗文网中验证码（超级鹰）" class="headerlink" title="网络爬虫——古诗文网中验证码（超级鹰）"></a>网络爬虫——古诗文网中验证码（超级鹰）</h2><h4 id="目标网址-古诗文网"><a href="#目标网址-古诗文网" class="headerlink" title="目标网址: 古诗文网"></a>目标网址: 古诗文网</h4><h6 id="目标网址：https-so-gushiwen-org-user-login-aspx-from-http-so-gushiwen-org-user-collect-aspx"><a href="#目标网址：https-so-gushiwen-org-user-login-aspx-from-http-so-gushiwen-org-user-collect-aspx" class="headerlink" title="目标网址：https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx"></a>目标网址：<a href="https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx" target="_blank" rel="noopener">https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx</a></h6><p><img src="https://img-blog.csdnimg.cn/20200510095336662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h6 id="任务要求："><a href="#任务要求：" class="headerlink" title="任务要求："></a>任务要求：</h6><p>（1）通过selenium的方式模拟该网站的登录，并成功输入用户名和密码；</p><p>（2）保存验证码图片，并使用输入式验证码识别的方式识别验证码的文字，获取后输入到输入框中，</p><p>（3）验证登录是否成功。</p><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><h6 id="超级鹰源码："><a href="#超级鹰源码：" class="headerlink" title="超级鹰源码："></a>超级鹰源码：</h6><pre class="line-numbers language-py"><code class="language-py">import requestsfrom hashlib import md5class Chaojiying_Client(object):    def __init__(self, username, password, soft_id):        self.username = username        # todo:更改点一        self.password = md5(password.encode("utf-8")).hexdigest()        self.soft_id = soft_id        self.base_params = {            'user': self.username,            'pass2': self.password,            'softid': self.soft_id,        }        self.headers = {            'Connection': 'Keep-Alive',            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)',        }    def PostPic(self, im, codetype):        params = {            'codetype': codetype,        }        params.update(self.base_params)        files = {'userfile': ('ccc.jpg', im)}        r = requests.post('http://upload.chaojiying.net/Upload/Processing.php', data=params, files=files, headers=self.headers)        return r.json()    def ReportError(self, im_id):        """        im_id:报错题目的图片ID        """        params = {            'id': im_id,        }        params.update(self.base_params)        r = requests.post('http://upload.chaojiying.net/Upload/ReportError.php', data=params, headers=self.headers)        return r.json()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="识别源码："><a href="#识别源码：" class="headerlink" title="识别源码："></a>识别源码：</h6><pre><code>from selenium import webdriver from selenium.common.exceptions import TimeoutException , NoSuchElementExceptionimport time from PIL import Imageimport pytesseractimport chaojiyingbrowser = webdriver.Edge(&#39;E:\\anaconda\\Scripts\\msedgedriver.exe&#39;)# browser = webdriver.Chrome()try:    browser.get(&#39;https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx&#39;)except TimeoutException:    print(&#39;Time Out&#39;)try:       username = browser.find_element_by_xpath(&#39;//*[@id=&quot;email&quot;]&#39;)    username.send_keys(&#39;自己账号&#39;)    time.sleep(1)    password = browser.find_element_by_xpath(&#39;//*[@id=&quot;pwd&quot;]&#39;)    password.send_keys(&#39;自己密码&#39;)    time.sleep(1)    pictureN = browser.find_element_by_xpath(&#39;//*[@id=&quot;imgCode&quot;]&#39;)    browser.save_screenshot(&#39;login.png&#39;)    loc = pictureN.location    size = pictureN.size    left = loc[&#39;x&#39;]    top = loc[&#39;y&#39;]    bottom = top+size[&#39;height&#39;]    right = left+size[&#39;width&#39;]    page = Image.open(&#39;login.png&#39;)    Code = page.crop((left,top,right,bottom))    Code.save(&#39;code.png&#39;)    chaojiying = Chaojiying_Client(&#39;超级鹰账号&#39;, &#39;密码&#39;, &#39;ID&#39;)#ID 具体看软件ID。    im = open(&#39;code.png&#39;, &#39;rb&#39;).read()    text = chaojiying.PostPic(im,2004)[&#39;pic_str&#39;]    print(text)#     text = pytesseract.image_to_string(Image.open(&#39;code.png&#39;))#     print(text)        CodeWhere = browser.find_element_by_xpath(&#39;//*[@id=&quot;code&quot;]&#39;)    CodeWhere.send_keys(text)    time.sleep(5)    Submit = browser.find_element_by_xpath(&#39;//*[@id=&quot;denglu&quot;]&#39;)    Submit.click()    time.sleep(5)except NoSuchElementException:    print(&#39;No Element&#39;)finally:    browser.close()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古诗文网 </tag>
            
            <tag> 超级鹰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式——1138纯净版代码（12864液晶）</title>
      <link href="/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-12864-ye-jing/"/>
      <url>/2018/12/09/qian-ru-shi-1138-chun-jing-ban-dai-ma-12864-ye-jing/</url>
      
        <content type="html"><![CDATA[<p>这些是我自己常用的代码，比官方的要简洁些，主要是自用，还有相关模块，使用代码。</p><p>具体文件可以去我github上下载。<br><img src="https://img-blog.csdnimg.cn/20200527145139304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就是这款。　　</p><h4 id="lcd12864简介"><a href="#lcd12864简介" class="headerlink" title="lcd12864简介"></a>lcd12864简介</h4><p>　　带中文字库的128X64是一种具有4位/8位并行、2线或3线串行多种接口方式，内部含有国标一级、二级简体中文字库的点阵图形液晶显示模块；其显示分辨率为128×64，内置8192个16<em>16点汉字，和128个16</em>8点ASCII字符集。利用该模块灵活的接口方式和简单、方便的操作指令，可构成全中文人机交互图形界面。可以显示8×4行16×16点阵的汉字。也可完成图形显示。低电压低功耗是其又一显著特点。由该模块构成的液晶显示方案与同类型的图形点阵液晶显示模块相比，不论硬件电路结构或显示程序都要简洁得多，且该模块的价格也略低于相同点阵的图形液晶模块。</p><h4 id="源码main函数"><a href="#源码main函数" class="headerlink" title="源码main函数"></a>源码main函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"lcd_driver.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"SoftI2C.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_memmap.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;sysctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;gpio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"LM3S1138_PinMap.H"</span></span><span class="token comment" spellcheck="true">// 将较长的标识符定义为较短的形式</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriEnable       SysCtlPeripheralEnable</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriDisable      SysCtlPeripheralDisable</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeIn          GPIOPinTypeGPIOInput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOut         GPIOPinTypeGPIOOutput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOD          GPIOPinTypeGPIOOutputOD</span><span class="token comment" spellcheck="true">//  定义KEY</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PERIPH             SYSCTL_PERIPH_GPIOG</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PORT               GPIO_PORTG_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY_PIN                GPIO_PIN_5</span><span class="token comment" spellcheck="true">//  防止JTAG失效</span><span class="token keyword">void</span>  <span class="token function">JTAG_Wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>KEY_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//  使能KEY所在的GPIO端口</span>    <span class="token function">GPIOPinTypeIn</span><span class="token punctuation">(</span>KEY_PORT <span class="token punctuation">,</span> KEY_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//  设置KEY所在管脚为输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">GPIOPinRead</span><span class="token punctuation">(</span>KEY_PORT <span class="token punctuation">,</span> KEY_PIN<span class="token punctuation">)</span>  <span class="token operator">==</span>  <span class="token number">0x00</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//  如果复位时按下KEY，则进入</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//  死循环，以等待JTAG连接</span>    <span class="token punctuation">}</span>    <span class="token function">SysCtlPeriDisable</span><span class="token punctuation">(</span>KEY_PERIPH<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//  禁止KEY所在的GPIO端口</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  定义全局的系统时钟变量</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span>  TheSysClock  <span class="token operator">=</span>  <span class="token number">12000000UL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  延时</span><span class="token comment" spellcheck="true">//=============================================================================================</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/*** 函    数:Delay()\'''//*** 功    能：延时//*** 参    数: x     延时的时间//============================================================================================void  Delay(unsigned long x){    unsigned long DelayValue = 0;    for (DelayValue = 0; DelayValue &lt; x; DelayValue++);}  //  系统初始化void  SystemInit(void){/*    SysCtlLDOSet(SYSCTL_LDO_2_50V);                             //  设置LDO输出电压    SysCtlClockSet(SYSCTL_USE_OSC |                             //  系统时钟设置，采用主振荡器                   SYSCTL_OSC_MAIN |                   SYSCTL_XTAL_6MHZ |                   SYSCTL_SYSDIV_1);    SysCtlLDOSet(SYSCTL_LDO_2_75V);                             //  配置PLL前须将LDO电压设置为2.75V*/</span>    <span class="token function">SysCtlClockSet</span><span class="token punctuation">(</span>SYSCTL_USE_PLL <span class="token operator">|</span>                             <span class="token comment" spellcheck="true">//  系统时钟设置，采用PLL</span>                   SYSCTL_OSC_MAIN <span class="token operator">|</span>                            <span class="token comment" spellcheck="true">//  主振荡器</span>                   SYSCTL_XTAL_6MHZ <span class="token operator">|</span>                           <span class="token comment" spellcheck="true">//  外接6MHz晶振</span>                   SYSCTL_SYSDIV_4<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//  分频结果为20MHz</span>    TheSysClock  <span class="token operator">=</span>  <span class="token function">SysCtlClockGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//  获取系统时钟，单位：Hz</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">JTAG_Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//  防止JTAG失效，重要！</span>     <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">init_lcd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">I2C_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">zlg_disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lcd-driver-c"><a href="#lcd-driver-c" class="headerlink" title="lcd_driver.c"></a>lcd_driver.c</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//  包含必要的头文件</span><span class="token comment" spellcheck="true">//  包含必要的头文件</span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">"lcd_driver.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_memmap.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_sysctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_gpio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;hw_adc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;sysctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;gpio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;adc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 将较长的标识符定义为较短的形式</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriEnable       SysCtlPeripheralEnable</span><span class="token macro property">#<span class="token directive keyword">define</span>  SysCtlPeriDisable      SysCtlPeripheralDisable</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeIn          GPIOPinTypeGPIOInput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOut         GPIOPinTypeGPIOOutput</span><span class="token macro property">#<span class="token directive keyword">define</span>  GPIOPinTypeOD          GPIOPinTypeGPIOOutputOD</span><span class="token macro property">#<span class="token directive keyword">define</span>  LCD_PORT               GPIO_PORTF_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span>  CS                     GPIO_PIN_1       </span><span class="token macro property">#<span class="token directive keyword">define</span>  SDAT                   GPIO_PIN_2</span><span class="token macro property">#<span class="token directive keyword">define</span>  SCLK                   GPIO_PIN_3</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> pos<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> gui_disp_buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建立缓冲区域</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ascii_tab<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"0123456789ABCDEF"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> line_sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">float</span> fTemp<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span>  <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token comment" spellcheck="true">//*** 函    数: sdelay()</span><span class="token comment" spellcheck="true">//*** 功    能：延时函数</span><span class="token comment" spellcheck="true">//*** 参    数: 延时计数数据</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:send_data()</span><span class="token comment" spellcheck="true">//*** 功    能：液晶串行移位数据</span><span class="token comment" spellcheck="true">//*** 参    数: data   串行移位的数据</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">send_data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//8位为待送数据</span><span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>data1<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    data1<span class="token operator">=</span>data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//看一下d7是高是低</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//是高的话送出1</span>        <span class="token punctuation">{</span>            <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SDAT <span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>                  <span class="token comment" spellcheck="true">//否则的话送出0</span>    <span class="token punctuation">{</span>            <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SDAT <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//不读忙线，但要等到不忙为止。</span>    <span class="token punctuation">}</span>    <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SCLK <span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sclk=1</span>        <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SCLK <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sclk=0</span>    <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    data<span class="token operator">=</span>data<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:write_data()</span><span class="token comment" spellcheck="true">//*** 功    能: 写数据</span><span class="token comment" spellcheck="true">//*** 参    数: data   RW=1,RS=1时传送的数据指令</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//八位是待写入数据</span><span class="token punctuation">{</span>         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data1<span class="token operator">=</span><span class="token number">0xfa</span><span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//data2中存放高4位数据，data3中存放低4位数据</span>     <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS <span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//cs=1</span>     <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     data2<span class="token operator">=</span>data <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//取高4位数据</span>     data3<span class="token operator">=</span><span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//取低4位数据</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//cs=0</span>     <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:write_comm()</span><span class="token comment" spellcheck="true">//*** 功    能: 写命令</span><span class="token comment" spellcheck="true">//*** 参    数: data   RW=0,RS=0时传送的命今指令</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//低八位是待写入数据</span><span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data1<span class="token operator">=</span><span class="token number">0xf8</span><span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//data2中存放高4位数据，data3中存放低4位数据</span>     <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS <span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//cs=1</span>     <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     data2<span class="token operator">=</span>data <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//取高4位数据</span>     data3<span class="token operator">=</span><span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//取低4位数据</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">send_data</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//cs=0</span>     <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:init_lcd()</span><span class="token comment" spellcheck="true">//*** 功    能: LCM初始化</span><span class="token comment" spellcheck="true">//*** 参    数: 无</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">init_lcd</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">SysCtlPeriEnable</span><span class="token punctuation">(</span>SYSCTL_PERIPH_GPIOF<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//  使能GPIOF端口</span>      <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  设置PF1为输出类型</span>      <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SDAT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//  设置PF2为输出类型</span>      <span class="token function">GPIOPinTypeOut</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SCLK<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//  设置PF3为输出类型</span>      <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> CS <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//CS=0</span>      <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SDAT <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//SDAT=0</span>      <span class="token function">GPIOPinWrite</span><span class="token punctuation">(</span>LCD_PORT <span class="token punctuation">,</span> SCLK <span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//SCLK=0</span>      <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//基本指令集</span>      <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清除显示屏幕，把DDRAM位址计数器调整为"00H"</span>      <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把DDRAM位址计数器调整为"00H"，游标回原点，该功能不影响显示DDRAM</span>      <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//光标右移</span>      <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示屏打开</span>      <span class="token function">sdelay</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:screen()</span><span class="token comment" spellcheck="true">//*** 功    能: 全屏显示</span><span class="token comment" spellcheck="true">//*** 参    数: data   基本指令集下要显示一维数组</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">screen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                  <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第一行，第一列</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                     <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第二行，第一列</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                   <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第三行，第一列</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                     <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第四行，第一列</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token function">write_data</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>               <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:disp_line(unsigned char line,unsigned char data[])</span><span class="token comment" spellcheck="true">//*** 功    能: 写一行数据</span><span class="token comment" spellcheck="true">//*** 参    数: line   行（0~3）</span><span class="token comment" spellcheck="true">//*** 参    数: data   基本指令集下要显示一维数组(16字节）</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>     <span class="token punctuation">{</span>             <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>             <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第一行，第一列</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第二行，第一列</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第三行，第一列</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定DDRAM第四行，第一列</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">write_data</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:GUI_ClearSCR()</span><span class="token comment" spellcheck="true">//*** 功    能: 清屏（扩充指令集下）</span><span class="token comment" spellcheck="true">//*** 参    数: mode:  模式</span><span class="token comment" spellcheck="true">//                   0:基本指令集</span><span class="token comment" spellcheck="true">//                   1:扩充指令集</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token keyword">char</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//基本指令集</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除屏幕</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//扩充指令集</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//填写缓冲区域</span>                <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">64</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                    gui_disp_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                  x<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>                 <span class="token function">write_comm</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//设置坐标 </span>                <span class="token function">write_comm</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                       <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                        <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token operator">++</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">write_comm</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                x<span class="token operator">=</span><span class="token number">0x88</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>                <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">64</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                        <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                        <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token operator">++</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本指令集，绘图显示</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lcd_demo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">paint</span><span class="token punctuation">(</span>paint_buffer1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GUI_ClearSCR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//============================================================================================    </span><span class="token comment" spellcheck="true">//*** 函    数:location(int y,int x)</span><span class="token comment" spellcheck="true">//*** 功    能:汉字定位</span><span class="token comment" spellcheck="true">//*** 参    数:</span><span class="token comment" spellcheck="true">//============================================================================================</span><span class="token keyword">void</span> <span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x90</span> <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>     <span class="token function">write_comm</span><span class="token punctuation">(</span><span class="token number">0x98</span> <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==========================================================</span><span class="token comment" spellcheck="true">//      在LCD上显示</span><span class="token comment" spellcheck="true">//==========================================================</span><span class="token keyword">void</span>  <span class="token function">zlg_disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//     unsigned x;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lcd_buffer<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> hz_1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"年月日星期日一二三四五六键盘温度"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x=fTemp*10;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>              lcd_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>              lcd_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>hz_1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                lcd_buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>hz_1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>hz_1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>hz_1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">;</span>              lcd_buffer<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span>ascii_tab<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span>ascii_tab<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>                   lcd_buffer<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>      lcd_buffer<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>      <span class="token function">disp_line</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>lcd_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个不用修改优先级，所以startup_ewarm.c不用动。</p><p>具体的就不讲解了，地址后期会附上</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1138 </tag>
            
            <tag> 12864 </tag>
            
            <tag> lcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风格迁移——代码部分</title>
      <link href="/2018/10/29/juan-ji-shen-jing-wang-luo-san-feng-ge-qian-yi-dai-ma-bu-fen/"/>
      <url>/2018/10/29/juan-ji-shen-jing-wang-luo-san-feng-ge-qian-yi-dai-ma-bu-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积神经网络：（三）风格迁移——代码部分"><a href="#卷积神经网络：（三）风格迁移——代码部分" class="headerlink" title="卷积神经网络：（三）风格迁移——代码部分"></a>卷积神经网络：（三）风格迁移——代码部分</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文是在第一步配置完环境后基础上运行的。使用的为系统直装的python环境（在anaconda环境下一样适用，后面注意的点会提示的。）。<br>友情提示：风格迁移跑的时间会很长。有点耐心哦。</p><p>若想查看环境配置步骤，请点击<a href="https://blog.csdn.net/weixin_41108515/article/details/103636284" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103636284</a>，</p><p>想知道原理，请点击<a href="https://blog.csdn.net/weixin_41108515/article/details/103650964" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103650964</a></p><p>转载请注明出处：<a href="https://blog.csdn.net/weixin_41108515/article/details/103651784" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103651784</a></p><p>这里引用的是：<br><a href="https://blog.csdn.net/aaronjny/article/details/79681080" target="_blank" rel="noopener">https://blog.csdn.net/aaronjny/article/details/79681080</a><br><a href="http://zh.gluon.ai/chapter_computer-vision/neural-style.html" target="_blank" rel="noopener">http://zh.gluon.ai/chapter_computer-vision/neural-style.html</a><br>这两篇都非常详细，并且经调试可以使用，但是第二个并未使用tensorflow。<br>以及理论帮助的一篇<a href="https://juejin.im/post/5d29e818e51d454f73356de0" target="_blank" rel="noopener">https://juejin.im/post/5d29e818e51d454f73356de0</a></p><h2 id="第一部分-：简介"><a href="#第一部分-：简介" class="headerlink" title="第一部分 ：简介"></a>第一部分 ：简介</h2><p>主要操作以这部分为主，这篇引用的是<a href="https://blog.csdn.net/aaronjny/article/details/79681080" target="_blank" rel="noopener">tensorflow练手项目三</a>。可以通过点击查看，代码也是所有我调试过的里面较简洁的一个，能够实现基本功能。这里只是我添加了一些了解，以及操作步骤，便于新手理解。</p><p>所谓风格迁移就是两张图片，你有你的风格，我有我的内容。你用你的油画<img src="https://img-blog.csdnimg.cn/20191222152716368.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>风格将我的内容进行绘画一遍。这里使用的是style里面的图片（painting.jpg），数据集将存放在<a href="https://pan.baidu.com/s/1lTWsIRpMCxkopcsqUfdMFw" target="_blank" rel="noopener">百度网盘</a>。</p><p>content文件选取的是qd.jpg，在content文件夹下。<br><img src="https://img-blog.csdnimg.cn/20191222152726511.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最终实现效果如下。</p><p><img src="https://img-blog.csdnimg.cn/20191222152856860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="第二部分-：操作"><a href="#第二部分-：操作" class="headerlink" title="第二部分 ：操作"></a>第二部分 ：操作</h2><h4 id="1-获取模型"><a href="#1-获取模型" class="headerlink" title="1.获取模型"></a>1.获取模型</h4><p>VGG是Visual Geometry Group 这个实验室发明的，VGG是在2014年的 ILSVRC localization and classification 两个问题上分别取得了第一名和第二名的网络架构，是一个具有里程碑意义的CNN架构，其中最令人震惊的就是它的深度，这里使用的VGG19，有19层之多。VGG19包含了19个隐藏层（16个卷积层和3个全连接层）。VGG网络的结构非常一致，从头到尾全部使用的是3x3的卷积和2x2的max pooling。</p><p>选择使用VGG是为了将深度卷积神经网络的训练从对数据集特征的一步步抽取的过程，从简单的特征，到复杂的特征的模式转为直接使用已经训练好的模型进行特征抽取。在imagenet数据集上训练好的模型上，直接抽取其他图像的特征，虽说这样的效果往往没有在新数据上重新训练的效果好，但能够节省大量的训练时间，在特定情况下非常有用。</p><p>CNN在图片处理上表现良好，VGG19提出后，也被用在图像处理上。我这里要用到的VGG19模型就是在imagenet数据集上预训练的模型。<br>注： 预训练好的VGG19模型可以从<a href="http://www.vlfeat.org/matconvnet/models/beta16/imagenet-vgg-verydeep-19.mat" target="_blank" rel="noopener">http://www.vlfeat.org/matconvnet/models/beta16/imagenet-vgg-verydeep-19.mat</a>下载，下载较慢的话，网盘<a href="https://pan.baidu.com/s/1uFinsEArbrgYRc2FWY9zVw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uFinsEArbrgYRc2FWY9zVw</a>：。</p><h4 id="2-模型修改"><a href="#2-模型修改" class="headerlink" title="2.模型修改"></a>2.模型修改</h4><p>这里是指从预训练的VGG模型中，获取卷积层部分的参数，用于构建我们自己的模型。VGG19中的全连接层舍弃掉，这一部分对提取图像特征基本无用。VGG19模型中权重由ImageNet训练而来，全部是作为常量使用的，这些参数是不会再被训练的，在反向传播的过程中也不会改变。</p><p>现在知道图片的内容表示和风格表示在卷积神经网络中是可分离的。也就是说，我们可以独立地操纵这两种表示来产生新的有感知意义上的图片。</p><p>风格迁移图片是通过寻找一个同时匹配照片内容和对应的艺术风格的图片的方法而生成的。这些合成图片在保留原始照片的全局布置的同时，继承了各种艺术图片的不同艺术风格。风格表示是一个多层次的表达，包括了神经网络结构的多个层次。当风格表示只包含了少量的低层结构，（简单理解为训练模型次数少，模型特征不够强势）风格的就变得更加局部化，产生不同的视觉效果。当风格表示由网络的高层结构表示时，图像的结构会在更大的范围内和这种风格匹配（特征强势，会改变整个图的风格），产生别样的感觉。<br>理论上简单理解了，开始操作。</p><p> 这里建立py文件 models.py，下面内容我会写在注释里。</p><pre class="line-numbers language-py"><code class="language-py">    # 导入必须的包    import tensorflow as tf    import numpy as np    import settings    import scipy.io    import scipy.misc    class Model(object):        def __init__(self, content_path, style_path):            self.content = self.loadimg(content_path)  # 加载内容图片            self.style = self.loadimg(style_path)  # 加载风格图片            self.random_img = self.get_random_img()  # 生成噪音内容图片            self.net = self.vggnet()  # 建立vgg网络        def vggnet(self):                # 读取预训练的vgg模型                # 这里装的是misc，安装opencv的也亦可以使用opencv等其他方法            vgg = scipy.io.loadmat(settings.VGG_MODEL_PATH)             vgg_layers = vgg['layers'][0]            net = {}                # 使用预训练的模型参数构建vgg网络的卷积层和池化层            # 全连接层不需要            # 注意，除了input之外，这里参数都为常量，不训练vgg的参数（权重比），这个以及训练完不需调整。            # 需要进行训练的是input，它即是我们最终生成的图像            net['input'] = tf.Variable(np.zeros([1, settings.IMAGE_HEIGHT, settings.IMAGE_WIDTH, 3]), dtype=tf.float32)            # 参数对应的层数可以参考vgg模型图            net['conv1_1'] = self.conv_relu(net['input'], self.get_wb(vgg_layers, 0))            net['conv1_2'] = self.conv_relu(net['conv1_1'], self.get_wb(vgg_layers, 2))            net['pool1'] = self.pool(net['conv1_2'])            net['conv2_1'] = self.conv_relu(net['pool1'], self.get_wb(vgg_layers, 5))            net['conv2_2'] = self.conv_relu(net['conv2_1'], self.get_wb(vgg_layers, 7))            net['pool2'] = self.pool(net['conv2_2'])            net['conv3_1'] = self.conv_relu(net['pool2'], self.get_wb(vgg_layers, 10))            net['conv3_2'] = self.conv_relu(net['conv3_1'], self.get_wb(vgg_layers, 12))            net['conv3_3'] = self.conv_relu(net['conv3_2'], self.get_wb(vgg_layers, 14))            net['conv3_4'] = self.conv_relu(net['conv3_3'], self.get_wb(vgg_layers, 16))            net['pool3'] = self.pool(net['conv3_4'])            net['conv4_1'] = self.conv_relu(net['pool3'], self.get_wb(vgg_layers, 19))               net['conv4_2'] = self.conv_relu(net['conv4_1'], self.get_wb(vgg_layers, 21))            net['conv4_3'] = self.conv_relu(net['conv4_2'], self.get_wb(vgg_layers, 23))            net['conv4_4'] = self.conv_relu(net['conv4_3'], self.get_wb(vgg_layers, 25))            net['pool4'] = self.pool(net['conv4_4'])            net['conv5_1'] = self.conv_relu(net['pool4'], self.get_wb(vgg_layers, 28))            net['conv5_2'] = self.conv_relu(net['conv5_1'], self.get_wb(vgg_layers, 30))            net['conv5_3'] = self.conv_relu(net['conv5_2'], self.get_wb(vgg_layers, 32))            net['conv5_4'] = self.conv_relu(net['conv5_3'], self.get_wb(vgg_layers, 34))            net['pool5'] = self.pool(net['conv5_4'])            return net        def conv_relu(self, input, wb):            """            进行先卷积、后relu的运算            :param input: 输入层            :param wb: wb[0],wb[1] == w,b            :return: relu后的结果            """            conv = tf.nn.conv2d(input, wb[0], strides=[1, 1, 1, 1], padding='SAME')            relu = tf.nn.relu(conv + wb[1])            return relu        def pool(self, input):            """            进行max_pool操作            :param input: 输入层            :return: 池化后的结果            """            return tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')        def get_wb(self, layers, i):            """            从预训练好的vgg模型中读取参数            :param layers: 训练好的vgg模型            :param i: vgg指定层数            :return: 该层的w,b            """            w = tf.constant(layers[i][0][0][0][0][0])            bias = layers[i][0][0][0][0][1]            b = tf.constant(np.reshape(bias, (bias.size)))            return w, b        def get_random_img(self):            """            根据噪音和内容图片，生成一张随机图片            :return:            """            noise_image = np.random.uniform(-20, 20, [1, settings.IMAGE_HEIGHT, settings.IMAGE_WIDTH, 3])            random_img = noise_image * settings.NOISE + self.content * (1 - settings.NOISE)            return random_img        def loadimg(self, path):            """            加载一张图片，将其转化为符合要求的格式            :param path:            :return:            """            # 读取图片            image = scipy.misc.imread(path)            # 重新设定图片大小            image = scipy.misc.imresize(image, [settings.IMAGE_HEIGHT, settings.IMAGE_WIDTH])            # 改变数组形状，其实就是把它变成一个batch_size=1的batch            image = np.reshape(image, (1, settings.IMAGE_HEIGHT, settings.IMAGE_WIDTH, 3))            # 减去均值，使其数据分布接近0            image = image - settings.IMAGE_MEAN_VALUE            return image    if __name__ == '__main__':        Model(settings.CONTENT_IMAGE, settings.STYLE_IMAGE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-模型训练"><a href="#3-模型训练" class="headerlink" title="3.模型训练"></a>3.模型训练</h4><p>但是实际上，图片的内容和风格是不能够被完全分离的。当我们合成图片时，我们通常找不出一张能够匹配某个图片内容和另一种图片风格的图片。在我们合成图片的过程中，我们需要最小化的损失函数包含内容和风格，但它们是分开的。因此，我们需要平滑地调整内容和风格的权重比例。当损失函数分配在内容和风格的权重不同时，合成产生的图片效果也完全不一样。我们需要适当地调整内容表示和风格表示的权重比来产生具有视觉感染力的图片。是否能够找到合适的权重比是能否产生令人满意的图片的关键因素。</p><p>就是将输入层的Variable训练到满意的比例，最开始输入一张噪音图片，然后不断地根据内容loss和风格loss对其进行调整，直到一定次数后，该图片兼具了风格图片的风格以及内容图片的内容。当训练结束时，输入层的参数就是我们生成的图片。</p><p>这里建立py文件 train.py，下面内容我会写在注释里。</p><pre class="line-numbers language-py"><code class="language-py">    # -*- coding: utf-8 -*-    import tensorflow as tf    import settings    import models    import numpy as np    import scipy.misc    def loss(sess, model):        """        定义模型的损失函数        :param sess: tf session        :param model: 神经网络模型        :return: 内容损失和风格损失的加权和损失        """        # 先计算内容损失函数        # 获取定义内容损失的vgg层名称列表及权重        content_layers = settings.CONTENT_LOSS_LAYERS        # 将内容图片作为输入，方便后面提取内容图片在各层中的特征矩阵        sess.run(tf.assign(model.net['input'], model.content))        # 内容损失累加量        content_loss = 0.0        # 逐个取出衡量内容损失的vgg层名称及对应权重        for layer_name, weight in content_layers:            # 提取内容图片在layer_name层中的特征矩阵            p = sess.run(model.net[layer_name])            # 提取噪音图片在layer_name层中的特征矩阵            x = model.net[layer_name]            # 长x宽            M = p.shape[1] * p.shape[2]            # 信道数            N = p.shape[3]            # 根据公式计算损失，并进行累加            content_loss += (1.0 / (2 * M * N)) * tf.reduce_sum(tf.pow(p - x, 2)) * weight        # 将损失对层数取平均        content_loss /= len(content_layers)        # 再计算风格损失函数        style_layers = settings.STYLE_LOSS_LAYERS        # 将风格图片作为输入，方便后面提取风格图片在各层中的特征矩阵        sess.run(tf.assign(model.net['input'], model.style))        # 风格损失累加量        style_loss = 0.0        # 逐个取出衡量风格损失的vgg层名称及对应权重        for layer_name, weight in style_layers:            # 提取风格图片在layer_name层中的特征矩阵            a = sess.run(model.net[layer_name])            # 提取噪音图片在layer_name层中的特征矩阵            x = model.net[layer_name]            # 长x宽            M = a.shape[1] * a.shape[2]            # 信道数            N = a.shape[3]            # 求风格图片特征的gram矩阵            A = gram(a, M, N)            # 求噪音图片特征的gram矩阵            G = gram(x, M, N)            # 根据公式计算损失，并进行累加            style_loss += (1.0 / (4 * M * M * N * N)) * tf.reduce_sum(tf.pow(G - A, 2)) * weight        # 将损失对层数取平均        style_loss /= len(style_layers)        # 将内容损失和风格损失加权求和，构成总损失函数        loss = settings.ALPHA * content_loss + settings.BETA * style_loss        return loss    def gram(x, size, deep):        """        创建给定矩阵的格莱姆矩阵，用来衡量风格        :param x:给定矩阵        :param size:矩阵的行数与列数的乘积        :param deep:矩阵信道数        :return:格莱姆矩阵        """        # 改变shape为（size,deep）        x = tf.reshape(x, (size, deep))        # 求xTx        g = tf.matmul(tf.transpose(x), x)        return g    def train():        # 创建一个模型        model = models.Model(settings.CONTENT_IMAGE, settings.STYLE_IMAGE)        # 创建session        with tf.Session() as sess:            # 全局初始化            sess.run(tf.global_variables_initializer())            # 定义损失函数            cost = loss(sess, model)            # 创建优化器            optimizer = tf.train.AdamOptimizer(1.0).minimize(cost)            # 再初始化一次（主要针对于第一次初始化后又定义的运算，不然可能会报错）            sess.run(tf.global_variables_initializer())            # 使用噪声图片进行训练            sess.run(tf.assign(model.net['input'], model.random_img))            # 迭代指定次数            for step in range(settings.TRAIN_STEPS):                # 进行一次反向传播                sess.run(optimizer)                # 每隔一定次数，输出一下进度，并保存当前训练结果                if step % 50 == 0:                    print('step {} is down.'.format(step))                    # 取出input的内容，这是生成的图片                    img = sess.run(model.net['input'])                    # 训练过程是减去均值的，这里要加上                    img += settings.IMAGE_MEAN_VALUE                    # 这里是一个batch_size=1的batch，所以img[0]才是图片内容                    img = img[0]                    # 将像素值限定在0-255，并转为整型                    img = np.clip(img, 0, 255).astype(np.uint8)                    # 保存图片                    scipy.misc.imsave('{}-{}.jpg'.format(settings.OUTPUT_IMAGE,step), img)            # 保存最终训练结果            img = sess.run(model.net['input'])            img += settings.IMAGE_MEAN_VALUE            img = img[0]            img = np.clip(img, 0, 255).astype(np.uint8)            scipy.misc.imsave('{}.jpg'.format(settings.OUTPUT_IMAGE), img)    if __name__ == '__main__':        train()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-系统文件配置这里建立py文件-setting-py。"><a href="#4-系统文件配置这里建立py文件-setting-py。" class="headerlink" title="4.系统文件配置这里建立py文件 setting.py。"></a>4.系统文件配置这里建立py文件 setting.py。</h4><pre class="line-numbers language-py"><code class="language-py">    # -*- coding: utf-8 -*-    # 内容图片路径    CONTENT_IMAGE = 'content/qd.jpg' # 路径/图片 自己在工程文件夹下建立。    # 风格图片路径    STYLE_IMAGE = 'style/painting.jpg' # 路径/图片 自己在工程文件夹下建立。    # 输出图片路径    OUTPUT_IMAGE = 'output/output' # 路径/图片开始名 自己在工程文件夹下建立。    # 预训练的vgg模型路径    VGG_MODEL_PATH = 'imagenet-vgg-verydeep-19.mat' # 直接置于工程文件夹即可。    # 图片宽度    IMAGE_WIDTH = 450    # 图片高度    IMAGE_HEIGHT = 300    # 定义计算内容损失的vgg层名称及对应权重的列表    CONTENT_LOSS_LAYERS = [('conv4_2', 0.5),('conv5_2',0.5)]    # 定义计算风格损失的vgg层名称及对应权重的列表    STYLE_LOSS_LAYERS = [('conv1_1', 0.2), ('conv2_1', 0.2), ('conv3_1', 0.2), ('conv4_1', 0.2), ('conv5_1', 0.2)]    # 噪音比率    NOISE = 0.5    # 图片RGB均值    IMAGE_MEAN_VALUE = [128.0, 128.0, 128.0]    # 内容损失权重    ALPHA = 1    # 风格损失权重    BETA = 500    # 训练次数    TRAIN_STEPS = 3000  # 这里推荐几百次就行，确实时间太长。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 风格迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风格迁移——原理部分</title>
      <link href="/2018/10/28/juan-ji-shen-jing-wang-luo-er-feng-ge-qian-yi-yuan-li-bu-fen/"/>
      <url>/2018/10/28/juan-ji-shen-jing-wang-luo-er-feng-ge-qian-yi-yuan-li-bu-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积神经网络：（二）风格迁移——原理部分"><a href="#卷积神经网络：（二）风格迁移——原理部分" class="headerlink" title="卷积神经网络：（二）风格迁移——原理部分"></a>卷积神经网络：（二）风格迁移——原理部分</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文是在第一步配置完环境后基础上运行的。使用的为系统直装的python环境（在anaconda环境下一样适用，后面注意的点会提示的。）。若想查看环境配置步骤，请点击<a href="https://blog.csdn.net/weixin_41108515/article/details/103636284" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103636284</a>，因原理部分篇幅较多，所以将所有代码，知识部分移到第三篇博客上，若是对于该原理了解熟悉，或只想操作不需深入的，可以直接跳过。所有操作都在第三篇上。<br>&nbsp;<br>转载请注明出处：<a href="https://blog.csdn.net/weixin_41108515/article/details/103650964" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103650964</a><br>&nbsp;<br>这里引用的是：<br><a href="http://zh.gluon.ai/chapter_computer-vision/neural-style.html" target="_blank" rel="noopener">http://zh.gluon.ai/chapter_computer-vision/neural-style.html</a><br><a href="https://blog.csdn.net/aaronjny/article/details/79681080" target="_blank" rel="noopener">https://blog.csdn.net/aaronjny/article/details/79681080</a><br>这两篇都非常详细，并且经调试可以使用。</p><h2 id="涉及到的相关原理："><a href="#涉及到的相关原理：" class="headerlink" title="涉及到的相关原理："></a>涉及到的相关原理：</h2><h4 id="1、神经网络部分原理："><a href="#1、神经网络部分原理：" class="headerlink" title="1、神经网络部分原理："></a>1、神经网络部分原理：</h4><h4 id="1-1-神经网络基础介绍"><a href="#1-1-神经网络基础介绍" class="headerlink" title="1.1 神经网络基础介绍"></a>1.1 神经网络基础介绍</h4><p>神经网络基本可以分成两种：一种为生物神经网络，一种为人工神经网络。<br>生物神经网络一般是指生物的大脑神经元，细胞，触点等组成的网络，用于产生生物的意识，帮助生物进行思考和行动。其主要是由生物神经元构成，如下图所示。<img src="https://img-blog.csdnimg.cn/2019122210122665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">人工神经网络就是模拟人思维的第二种方式。这是一个非线性动力学系统，其特色在于信息的分布式存储和并行协同处理。虽然单个神经元的结构极其简单，功能有限，但大量神经元构成的网络系统所能实现的行为却是极其丰富多彩的。<br>神经网络的研究内容相当广泛，反映了多学科交叉技术领域的特点。主要的研究工作集中在以下几个方面：<br>（1）生物原型研究。从生理学、心理学、解剖学、脑科学、病理学等生物科学方面研究神经细胞、神经网络、神经系统的生物原型结构及其功能机理。<br>（2）建立理论模型。根据生物原型的研究，建立神经元、神经网络的理论模型。其中包括概念模型、知识模型、物理化学模型、数学模型等。<br>（3）网络模型与算法研究。在理论模型研究的基础上构作具体的神经网络模型，以实现计算机模拟或准备制作硬件，包括网络学习算法的研究。这方面的工作也称为技术模型研究。<br>（4）人工神经网络应用系统。在网络模型与算法研究的基础上，利用人工神经网络组成实际的应用系统，例如，完成某种信号处理或模式识别的功能、构造专家系统、制成机器人等等。<br> 纵观当代新兴科学技术的发展历史，人类在征服宇宙空间、基本粒子，生命起源等科学技术领域的进程中历经了崎岖不平的道路。我们也会看到，探索人脑功能和神经网络的研究将伴随着重重困难的克服而日新月异。人工神经网络如下图所示。<img src="https://img-blog.csdnimg.cn/20191222101416373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-2-卷积神经网络基本结构"><a href="#1-2-卷积神经网络基本结构" class="headerlink" title="1.2 卷积神经网络基本结构"></a>1.2 卷积神经网络基本结构</h4><p>卷积神经网络(Convolutional Neural Network，CNN)是一种前馈神经网络，它的人工神经元可以对周围单元的一部分进行响应，并能很好的处理大型的图片。卷积神经网络是近几年来发展起来的一种高效的识别方法，并引起了广泛的关注[16]。正是由于高效的识别准确率，对卷积神经网络的研究才层出不穷。20世纪60年代，胡贝尔和魏塞尔发现，独特的网络结构可以有效地减少反馈神经网络在大脑皮层神经元研究中的局部敏感性和方向性选择的复杂性，从而提出了卷积神经网络(Convolutional Neural Networks简称CNN)的概念。目前，卷积神经网络已成为许多科学领域的热点话题。由于内部算法避免了对图像进行复杂的预处理，所以它可以直接输入原始图片。</p><h4 id="1-2-1-输入层"><a href="#1-2-1-输入层" class="headerlink" title="1.2.1 输入层"></a>1.2.1 输入层</h4><p>卷积神经网络的输入层可以处理多维数据，常见地，一维卷积神经网络的输入层接收一维或二维数组，其中一维数组通常为时间或频谱采样；二维数组可能包含多个通道；二维卷积神经网络的输入层接收二维或三维数组；三维卷积神经网络的输入层接收四维数组。</p><h4 id="1-2-2-隐含层"><a href="#1-2-2-隐含层" class="headerlink" title="1.2.2 隐含层"></a>1.2.2 隐含层</h4><h4 id="1-卷积层"><a href="#1-卷积层" class="headerlink" title="1.卷积层"></a>1.卷积层</h4><h5 id="（1）卷积层"><a href="#（1）卷积层" class="headerlink" title="（1）卷积层"></a>（1）卷积层</h5><p> 利用乘法卷积代替矩阵乘法。在图像处理的过程中，一张“小猫”的图片可以被看作是一个“薄饼”，它包括图片的高度、宽度和深度(即颜色的三原色，以RGB表示)。<img src="https://img-blog.csdnimg.cn/20191222102217444.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示，若权重不变，把这个上方具有k个输出的小神经网络对应的小块滑遍整个图像，可以得到一个宽度、高度、深度都不同的新图像。得到的新图像如下图所示。<br><img src="https://img-blog.csdnimg.cn/20191222102503552.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（2）卷积层参数"><a href="#（2）卷积层参数" class="headerlink" title="（2）卷积层参数"></a>（2）卷积层参数</h5><p>卷积层参数包括卷积核大小、步长和填充，三者共同决定了卷积层输出特征图的尺寸，是卷积神经网络的超参数。其中卷积核大小可以指定为小于输入图像尺寸的任意值，卷积核越大，可提取的输入特征越复杂。<br>卷积步长定义了卷积核相邻两次扫过特征图时位置的距离，卷积步长为1时，卷积核会逐个扫过特征图的元素，步长为n时会在下一次扫描跳过n-1个像素。<br>由卷积核的交叉相关计算可知，随着卷积层的堆叠，特征图的尺寸会逐步减小，例如16×16的输入图像在经过单位步长、无填充的5×5的卷积核后，会输出12×12的特征图。为此，填充是在特征图通过卷积核之前人为增大其尺寸以抵消计算中尺寸收缩影响的方法。常见的填充方法为按0填充和重复边界值填充。填充依据其层数和目的可分为四类：<br>有效填充（valid padding）：即完全不使用填充，卷积核只允许访问特征图中包含完整感受野的位置。输出的所有像素都是输入中相同数量像素的函数。使用有效填充的卷积被称为“窄卷积”，窄卷积输出的特征图尺寸为(L-f)/s+1。<br>相同填充/半填充：只进行足够的填充来保持输出和输入的特征图尺寸相同。相同填充下特征图的尺寸不会缩减但输入像素中靠近边界的部分相比于中间部分对于特征图的影响更小，即存在边界像素的欠表达。使用相同填充的卷积被称为“等长卷积。<br>全填充：进行足够多的填充使得每个像素在每个方向上被访问的次数相同。步长为1时，全填充输出的特征图尺寸为L+f-1，大于输入值。使用全填充的卷积被称为“宽卷积”。<br>任意填充：介于有效填充和全填充之间，人为设定的填充，较少使用。</p><h5 id="（3）激励函数"><a href="#（3）激励函数" class="headerlink" title="（3）激励函数"></a>（3）激励函数</h5><p>一个合适的激励函数可以有效地提高卷积神经网络的运行性能。激活函数应当具有的性质：<br> 1）可微性：当优化方法是基于梯度的时候，这个性质是必不可少的。<br> 2）单调性：当激活函数为单调函数时，能够确保单层网络为凸函数。<br> 3）输出值的范围：当激活函数的输出值受到限制时，基于梯度的优化方法将更加稳定，因为特征的表示更受有限权重的影响。当激活函数的输出是无限时，模型的训练将更加油效率，但在这种情形下，通常需要较小的学习速率。<br>经常使用的非线性激活函数有sigmid、tanh、Relu等等，前两者sigmid与tanh在全连接层 比较常见，后者ReLU常见于卷积层。</p><h4 id="2-池化层"><a href="#2-池化层" class="headerlink" title="2.池化层"></a>2.池化层</h4><h4 id="池化层是卷积神经网络的一个重要组成部分，它通过减少卷积层之间的连接数量来降低计算的困难度。包括以下几种池化："><a href="#池化层是卷积神经网络的一个重要组成部分，它通过减少卷积层之间的连接数量来降低计算的困难度。包括以下几种池化：" class="headerlink" title="池化层是卷积神经网络的一个重要组成部分，它通过减少卷积层之间的连接数量来降低计算的困难度。包括以下几种池化："></a>池化层是卷积神经网络的一个重要组成部分，它通过减少卷积层之间的连接数量来降低计算的困难度。包括以下几种池化：</h4><h5 id="（1）一般池化-General-Pooling"><a href="#（1）一般池化-General-Pooling" class="headerlink" title="（1）一般池化(General Pooling)"></a>（1）一般池化(General Pooling)</h5><p>1）mean-pooling，即只要求邻域中特征点的平均值；<br> 2）max-pooling，即在邻域中提取最大特征点；<br>3）Stochastic-pooling，介于两者之间，根据数值给出像素的概率，并根据概率进行二次采样。<br>特征提取的误差主要来自两个方面：<br> 1）邻域大小受限造成的估计值方差增大；<br> 2）卷积层参数误差导致估计均值的偏移。<br> 一般来说，mean-pooling能减小第一种误差并保留图像的背景信息，max-pooling能减小第二类的错误，并保留更多的纹理信息。在平均意义上，与mean-<br>pooling近似，在局部意义上，则服从max-pooling的准则。如图下图所示，</p><p><img src="https://img-blog.csdnimg.cn/20191222102557759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（2）空间金字塔池化-Spatial-pyramid-pooling"><a href="#（2）空间金字塔池化-Spatial-pyramid-pooling" class="headerlink" title="（2）空间金字塔池化(Spatial pyramid pooling)"></a>（2）空间金字塔池化(Spatial pyramid pooling)</h5><p>一般的卷积神将网络都需要输入图像的大小是固定的，这是因为全连接层的输入需要一个固定的维度。几乎所有作者提出了空间金字塔池化，先让图像进行卷积，然后变换为要输入到全连接层的维度，这样可以把卷积神经网络扩展到任意大小的图像。<br>空间金字塔池化可以把任何尺度的卷积特征转化成同一维，这不仅可以让卷积神经网络处理任意大小的图像，还能避免裁剪和扭曲操作，这具有重要意义。</p><h4 id="3-全连接层"><a href="#3-全连接层" class="headerlink" title="3.全连接层"></a>3.全连接层</h4><p>卷积神经网络中的全连接层等价于传统前馈神经网络中的隐含层。全连接层通常搭建在卷积神经网络隐含层的最后部分，并只向其它全连接层传递信号。特征图在全连接层中会失去三维结构，被展开为向量并通过激励函数传递至下一层。</p><h4 id="1-2-3-输出层"><a href="#1-2-3-输出层" class="headerlink" title="1.2.3 输出层"></a>1.2.3 输出层</h4><p>卷积神经网络中输出层的上游通常是全连接层，因此其结构和工作原理与传统前馈神经网络中的输出层相同。对于图像分类问题，输出层使用逻辑函数或归一化指数函数输出分类标签。在物体识别问题中，输出层可设计为输出物体的中心标、大小和分类。在图像语义分割中，输出层直接输出每个像素的分类结果。</p><h4 id="1-3-卷积神经网络的卷积过程"><a href="#1-3-卷积神经网络的卷积过程" class="headerlink" title="1.3 卷积神经网络的卷积过程"></a>1.3 卷积神经网络的卷积过程</h4><p>卷积神经网络的结构有很多种，但是其基本结构是类似的。如下图，它包含三个主要的层——卷积层(convolutional layer)、池化层(pooling layer)、全连接层(fully-connected layer)。<br><img src="https://img-blog.csdnimg.cn/20191222102628441.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图中的卷积网络工作流程如下， 输入图片是像素是32×32的来组成输入层。然后，计算流程在卷积和抽样之间交替进行，如下所述：<br>第一隐藏层进行卷积的工作，它由6个特征图组成，每个特征图由28×28个神经元组成，每个神经元指定5×5 的接受域。<br>第二隐藏层实现子采样和局部平均，它同样由 6个特征图组成，但其每个特征图由14×14 个神经元组成。每个神经元具有2×2 的接受域。<br>第三隐藏层进行第二次卷积，它由 16个特征图组成，每个特征图由 10×10个神经元组成。隐藏层中的每个神经元可以具有与下一隐藏层的多个特征图相关联的突触连接，其操作方式类似于第一层隐藏层的卷积过程。<br>第四个隐藏层进行第二次子采样和局部平均计算。它由 16个特征图组成，但每个特征图由 5×5个神经元构成，它以与第一次采样相同的方式进行工作。<br>第五个隐藏层实现了卷积的最后阶段，它由 120个神经元组成，每个神经元指定5×5 的接受域。<br>端部是个全连接层，得到输出向量。<br>卷积和采样之间的计算层的连续交替是“双尖塔”的结果，即在每个卷积或采样层中，与先前的层相比，特征图的数目随着空间分辨率的减小而增加[17]。<br>卷积层研究输入数据的特征。卷积层由卷积核(convolutional kernel)组成，卷积核用来计算不同的特征图；激励函数(activation function)给卷积神经网络引入了非线性，常用的有sigmid、tanh、 ReLU函数；池化层减少了卷积层输出的特征向量，改良结果(使结构不易过拟合)，典型应用有average pooling 和 max pooling；全连接层将卷积层和池化层组合起来以后，然后可以形成层或多层全连接层，从而可以完成更高水平的特征取得。</p><h2 id="2、迁移学习相关原理"><a href="#2、迁移学习相关原理" class="headerlink" title="2、迁移学习相关原理"></a>2、迁移学习相关原理</h2><h4 id="2-1-迁移学习"><a href="#2-1-迁移学习" class="headerlink" title="2.1 迁移学习"></a>2.1 迁移学习</h4><p>在深度学习中，所谓的迁移学习是将一个问题A上训练好的模型通过简单的调整使其适应一个新的问题B。在实际使用中，往往是完成问题A的训练出的模型有更完善的数据，而问题B的数据量偏小。而调整的过程根据现实情况决定，可以选择保留前几层卷积层的权重，以保留低级特征的提取；也可以保留全部的模型，只根据新的任务改变其fc层。被迁移的模型往往是使用大量样本训练出来的，比如Google提供的Inception V3网络模型使用ImageNet数据集训练，而ImageNet中有120万标注图片，然后在实际应用中，很难收集到如此多的样本数据。而且收集的过程需要消耗大量的人力无力，所以一般情况下来说，问题B的数据量是较少的。所以，同样一个模型在使用大样本很好的解决了问题A，那么有理由相信该模型中训练处的权重参数能够很好的完成特征提取任务。迁移学习具有如下优势：更短的训练时间，更快的收敛速度，更精准的权重参数。但是一般情况下如果任务B的数据量是足够的，那么迁移来的模型效果会不如训练的到，但是此时起码可以将底层的权重参数作为初始值来重新训练。</p><h4 id="2-2TensorFlow"><a href="#2-2TensorFlow" class="headerlink" title="2.2TensorFlow"></a>2.2TensorFlow</h4><p>TensorFlow是谷歌基于DistBelief进行研发的第二代人工智能学习系统。Tensor(张量)意味着N维数组，Flow(流)意味着基于数据流图的计算，TensorFlow为张量从流图的一端流动到另一端计算过程。TensorFlow是将复杂的数据传递到人工智能神经网络进行处理和分析的系统。<br>TensorFlow 表达了高层次的机器学习计算，大幅简化了第一代系统，并且具备更好的灵活性和可延展性。TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从手机、单个CPU / GPU到成百上千GPU卡组成的分布式系。TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。<br>TensorFlow可被用于像机器学习和深度学习的许多领域，如语音识别或者是图像处理，以及对深度学习的基础设施的各个方面进行改进。它能够运行在小到一个只能电话或数以百万计的CEN上。TensorFlow将是完全开源的，可以被任何人使用。这也是选择TensorFlow这个平台的主要原因。</p><h5 id="（1）支持多种硬件的平台"><a href="#（1）支持多种硬件的平台" class="headerlink" title="（1）支持多种硬件的平台"></a>（1）支持多种硬件的平台</h5><p>例如，它支持CPU、GPU混合数据中心的训练平台，并且还支持数据中心的训练模型，它相对方便地部署到不同的移动端应用程序，并且可以支持由谷歌自主开发的TPU处理器。这种多硬件支持平台会大大给用户带来方便。</p><h5 id="（2）支持多种开发环境"><a href="#（2）支持多种开发环境" class="headerlink" title="（2）支持多种开发环境"></a>（2）支持多种开发环境</h5><p> 支持各种硬件的平台是基础，也是TensorFlow始终能够帮助尽可能多的开发人员利用深度学习技术并最终受益于广大用户的原因。基于这一思想，TensorFlow一直都非常重视各种程序员开发环境。例如，开发人员可以在各式各样的、位于主要的位置的开发环境中使用TensorFlow环境。<br>目前TensorFlow仍处于快速开发迭代中，有大量新功能及性能优化在次持续研发。 </p><h4 id="2-3VGG卷积神经网络模型"><a href="#2-3VGG卷积神经网络模型" class="headerlink" title="2.3VGG卷积神经网络模型"></a>2.3VGG卷积神经网络模型</h4><p>VGG全称是Visual Geometry Group属于牛津大学科学工程系，其发布了一些列以VGG开头的卷积网络模型，可以应用在人脸识别、图像分类等方面，分别从VGG16～VGG19[20]。VGG研究卷积网络深度的初衷是想搞清楚卷积网络深度是如何影响大规模图像分类与识别的精度和准确率的，最初是VGG-16号称非常深的卷积网络全称为(GG-Very-Deep-16 CNN)，VGG在加深网络层数同时为了避免参数过多，在所有层都采用3x3的小卷积核，卷积层步长被设置为1。VGG的输入被设置为224x244大小的RGB图像，在训练集图像上对所有图像计算RGB均值，然后把图像作为输入传入VGG卷积网络，使用3x3或者1x1的filter，卷积步长被固定1。VGG全连接层有3层，根据卷积层+全连接层总数目的不同可以从VGG11 ～ VGG19，最少的VGG11有8个卷积层与3个全连接层，最多的VGG19有16个卷积层+3个全连接层，此外VGG网络并不是在每个卷积层后面跟上一个池化层，还是总数5个池化层，分布在不同的卷积层之下，下图是VGG11 ～GVV19的结构图：<br><img src="https://img-blog.csdnimg.cn/20191222102708425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在图中，A列是最基本的模型，有8个卷积层，3个全连接层，一共11层。B列是在A列的基础上，在stage1和stage2基础上分别增加了一层3<em>3卷积层，一共13层。C列是在B的基础上，在stage3,stage4和stage5基础上分别增加了一层1</em>1的卷积层。一共16层。D列是在B的基础上，在stage3,stage4和stage5基础上分别增加了一层3<em>3的卷积层，一共16层。E层是在D的基础上，在stage3,stage4和stage5基础上分别增加3</em>3的卷积层，一共19层。模型E就是VGG19网络。</p><h2 id="3、通过VGG实现风格迁移"><a href="#3、通过VGG实现风格迁移" class="headerlink" title="3、通过VGG实现风格迁移"></a>3、通过VGG实现风格迁移</h2><h4 id="3-1-图像风格迁移的原理"><a href="#3-1-图像风格迁移的原理" class="headerlink" title="3.1 图像风格迁移的原理"></a>3.1 图像风格迁移的原理</h4><p>VGGNET是一种图像识别模型，它也拥有者卷积层和全连接层。可以这样理解VGG的结构：前面的卷积层是从图像中提取“特征”，而后面的全连接层把图片的“特征”转换为类别概率。其中VGGNET中的浅层（conv1_1,conv1_2 ），提取的特征往往是比较简单的（比如提取检测点、线、亮度），VGGNET中的深层（c比如onv5_1,conv5_2），提取的特征往往比较复杂（如是否存在人脸、某种特定物体）。<br>VGGNET的本意是输入图像，提取特征，然后输出图像类别。图像风格迁移恰好与其相反，输入特征，之后输出对应这种特征的图片。两种过程的对比图片如下图所示：<br><img src="https://img-blog.csdnimg.cn/20191222104202202.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体来说，风格迁移使用卷积层的中间特征还原出对应这种特征的原始图像。具体过程就是：先选取一副原始图像，经过VGGNET计算后得到各个卷积层的特征。之后，根据这些卷积层的特征，还原出对应这种特征的原始图像.研究发现：浅层的还原效果往往比较好，卷积特征基本保留了所有原始图像中形状、位置、颜色、纹理等信息；深层对应的还原图像丢失了部分颜色和纹理信息，但大体保留原始图像中物体的形状和位置。</p><h4 id="3-2-代价函数"><a href="#3-2-代价函数" class="headerlink" title="3.2 代价函数"></a>3.2 代价函数</h4><p>要构建一个神经风格迁移系统，首先需要为生成的图像定义一个代价函数，通过最小化代价函数，可以大大缩短图片生成所需要的时间。为了实现神经风格迁移，需要定义一个关于G的代价函数，J用来评判某个生成图像的好坏，我们将使用梯度下降法去最小化J(G)，以便于生成这个图像。那么如何去判断生成图像的好坏，在这里把这个代价函数定义为两个部分。<br>Jcontent(C,G)<br> 第一部分被称作内容代价，这是一个关于内容图片和生成图片的函数，它是用来度量生成图片G的内容与内容图片C的内容有多相似。<br>Jstyle(S,G)<br>然后会把结果加上一个风格代价函数，也就是关于S和G的函数，用来度量图片G的风格和图片S的风格的相似度。<br>J(G)=αJcontent(C,G)+βJstyle(S,G)<br> 最后用两个超参数α和β来来确定内容代价和风格代价，两者之间的权重用两个超参数来确定。</p><h4 id="3-3-内容代价函数"><a href="#3-3-内容代价函数" class="headerlink" title="3.3 内容代价函数"></a>3.3 内容代价函数</h4><p>风格迁移网络的代价函数有一个内容代价部分，还有一个风格代价部分。</p><p> 首先定义内容代价部分。<br>用隐含层m来计算内容代价，如果m是个很小的数，比如用隐含层 1，这个代价函数就会使生成图片像素上非常接近内容图片。然而如果使用很深的层，那么可能在内容图片里面有一个具体的物体，在生成的图片里就会存在这个物体。比如是一只小猫，那么在生成的图片里就一定会有一个小猫。所以在实际中，这个层m在网络中既不会选的太浅也不会选的太深。通常𝑚会选择在网络的中间层，既不太浅也不很深，然后用一个预训练的卷积模型，本篇论文使用的是 VGG 网络。</p><p>之后需要衡量假如有一个内容图片和一个生成图片他们在内容上的相似度，令这个代表这两个图片α^([L][C])和α^([L][G])的l层的激活函数值。如果这两个激活值相似，那么就意味着两个图片的内容相似。<br> <img src="https://img-blog.csdnimg.cn/20191222110732731.png" alt="在这里插入图片描述"><br>为两个激活值不同或者相似的程度，取l层的隐含单元的激活值，按元素相减，内容图片的激活值与生成图片相比较，然后取平方，也可以在前面加上归一化或者不加，比如1/2或者其他的，都影响不大，因为这都可以由这个超参数α来调整。</p><h4 id="3-4-风格代价函数"><a href="#3-4-风格代价函数" class="headerlink" title="3.4 风格代价函数"></a>3.4 风格代价函数</h4><p>图像的风格可以用使用图像的卷积层特征的Gram矩阵来进行表示。在线性代数中这种矩阵被称为Gram矩阵，在这里可以称之为风格矩阵。<br>风格矩阵是一组向量的内积对称矩阵，比如向量组<img src="https://img-blog.csdnimg.cn/20191222110804515.png" alt="在这里插入图片描述"><br>的Gram矩阵是<br><img src="https://img-blog.csdnimg.cn/20191222111053849.png" alt="在这里插入图片描述"><br>取内积即欧几里得空间上的标准内积，即<br> <img src="https://img-blog.csdnimg.cn/20191222111102313.png" alt="在这里插入图片描述"><br>假设卷积层的输出为F_ij^l，那么这个卷积特征对应的Gram矩阵的第i行第j个元素定义为<br><img src="https://img-blog.csdnimg.cn/20191222111118616.png" alt="在这里插入图片描述"><br>设在第l层中，卷积特征的通道数为N_l,卷积的高、宽乘积数为M_l,那么F_ij^l满足<br> l≤i≤N_l，l≤j≤M_l<br>Gram矩阵在一定程度上可以体现图片的风格。多层的风格损失是单层风格损失的加权累加。</p><h4 id="3-5-模型训练过程"><a href="#3-5-模型训练过程" class="headerlink" title="3.5 模型训练过程"></a>3.5 模型训练过程</h4><p>首先，使用VGG中的一些层的输出来表示图片的内容特征和风格特征。<br>使用[‘conv4_2’,’conv5_2’]表示内容特征，使用[‘conv1_1’,’conv2_1’,’conv3_1’,’conv4_1’]表示风格特征。<br>将内容图片输入网络，计算内容图片在网络指定层上的输出值。</p><p>计算内容损失。可以这样定义内容损失：内容图片在指定层上提取出的特征矩阵，与噪声图片在对应层上的特征矩阵的差值的L2范数。即求两两之间的像素差值的平方。<br>对应每一层的内容损失函数：<br><img src="https://img-blog.csdnimg.cn/20191222111244537.png" alt="在这里插入图片描述"><br>其中，X是噪声图片的特征矩阵，P是内容图片的特征矩阵。M是P的长*宽，N是信道数。最终的内容损失为，每一层的内容损失加权和，再对层数取平均。<br>将风格图片输入网络，计算风格图片在网络指定层上的输出值。</p><p>计算风格损失。使用风格图像在指定层上的特征矩阵的GRAM矩阵来衡量其风格，风格损失可以定义为风格图像和噪音图像特征矩阵的格莱姆矩阵的差值的L2范数。</p><p> 对于每一层的风格损失函数：<br><img src="https://img-blog.csdnimg.cn/20191222111337543.png" alt="在这里插入图片描述"><br>其中M是特征矩阵的长*宽，N是特征矩阵的信道数。G为噪音图像特征的Gram矩阵，A为风格图片特征的GRAM矩阵。<br>最终的风格损失为，每一层的风格损失加权和，再对层数取平均。</p><p>函数为内容损失和风格损失的加权和：<br><img src="https://img-blog.csdnimg.cn/20191222111355281.png" alt="在这里插入图片描述"><br>当训练开始时，根据内容图片和噪声，生成一张噪声图片。并将噪声图片传送给网络，计算loss，再根据loss调整噪声图片。将调整后的图片发给网络，重新计算loss，再调整，再计算，直到达到指定迭代次数，这时，噪声图片已兼具内容图片的内容和风格图片的风格，进行保存即可，其训练过程如图下所示，训练顺序依次从左向右。<br><img src="https://img-blog.csdnimg.cn/20191222104239449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="原理总结：感谢能翻到这的同学们，这一篇只是为了让大家了解到一些相关知识，毕竟操作简单，主要的是算法思想。下一篇就是与代码相关的部分了，可以开始打开建的工程，写代码了！"><a href="#原理总结：感谢能翻到这的同学们，这一篇只是为了让大家了解到一些相关知识，毕竟操作简单，主要的是算法思想。下一篇就是与代码相关的部分了，可以开始打开建的工程，写代码了！" class="headerlink" title="原理总结：感谢能翻到这的同学们，这一篇只是为了让大家了解到一些相关知识，毕竟操作简单，主要的是算法思想。下一篇就是与代码相关的部分了，可以开始打开建的工程，写代码了！"></a>原理总结：感谢能翻到这的同学们，这一篇只是为了让大家了解到一些相关知识，毕竟操作简单，主要的是算法思想。下一篇就是与代码相关的部分了，可以开始打开建的工程，写代码了！</h4><p><a href="https://blog.csdn.net/weixin_41108515/article/details/103651784" target="_blank" rel="noopener">卷积神经网络：（三）风格迁移——代码部分</a></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 风格迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风格迁移——环境配置</title>
      <link href="/2018/10/27/juan-ji-shen-jing-wang-luo-yi-feng-ge-qian-yi-huan-jing-pei-zhi/"/>
      <url>/2018/10/27/juan-ji-shen-jing-wang-luo-yi-feng-ge-qian-yi-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积神经网络：（一）风格迁移——环境配置"><a href="#卷积神经网络：（一）风格迁移——环境配置" class="headerlink" title="卷积神经网络：（一）风格迁移——环境配置"></a>卷积神经网络：（一）风格迁移——环境配置</h1><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>本文主要在windows环境下搭建python环境，用python从零入手搭建一个简单的风格迁移模型。若为macos，linux可以参考其他博客搭建环境，再搭建该模型。<br>&nbsp;<br>转载请注明出处：<a href="https://blog.csdn.net/weixin_41108515/article/details/103636284" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103636284</a><br>&nbsp;</p><h2 id="第一步：搭建python环境："><a href="#第一步：搭建python环境：" class="headerlink" title="第一步：搭建python环境："></a>第一步：搭建python环境：</h2><h4 id="方法一-直装python环境（后期主要使用这一环境，方便一些不熟悉anaconda的同学）"><a href="#方法一-直装python环境（后期主要使用这一环境，方便一些不熟悉anaconda的同学）" class="headerlink" title="方法一 : 直装python环境（后期主要使用这一环境，方便一些不熟悉anaconda的同学）"></a>方法一 : 直装python环境（后期主要使用这一环境，方便一些不熟悉anaconda的同学）</h4><p>直接使用电脑默认环境，即电脑直接安装python环境，（这里推荐使用python3.6版本，3.7及以上版本目前不支持）<br>下载地址：<a href="https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe</a><br>如图示安装install Now即可,注意添加path以及安装路径，后期使用pycharm找编译环境会使用到。<img src="https://img-blog.csdnimg.cn/20191220183312800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：默认路径C:\users\用户名\Appdata\local\Programs\Python\Python36 也可以使用Customize installation来更换路径。<br>安装完成后，进入cmd界面，输入python，如图<br><img src="https://img-blog.csdnimg.cn/20191220183344749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现此界面即可。</p><h4 id="方法二-：使用anaconda搭建环境"><a href="#方法二-：使用anaconda搭建环境" class="headerlink" title="方法二 ：使用anaconda搭建环境:"></a>方法二 ：使用anaconda搭建环境:</h4><p>因为<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">anaconda官方网站</a>下下载较慢，这里推荐使用    <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华镜像</a>来下载。<br>清华镜像下载地址<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.2.0-Windows-x86_64.exe" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.2.0-Windows-x86_64.exe</a><br>如图所示安装anaconda，这里先用的是官方3.7的包：<br>注：anaconda官方当前最新版为基于python3.7version，这个并不意味着搭建的python环境版本就固定为3.7，但是这里还是不推荐使用下面会说明原因。<br>注：存在问题：1、下载太慢。2、3.7—version需额外对环境更改，这里只对3.7介绍安装步骤，不提供修改，清华镜像无问题安装步骤相同。</p><p>安装步骤：<br><img src="https://img-blog.csdnimg.cn/20191220222414658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191220222510588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目录还是自己选取也可以默认，但是必须记住便于后期编译环境选择。<br><img src="https://img-blog.csdnimg.cn/20191220222529582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里是指是否将anaconda里的python作为电脑默认python环境。<br>&emsp;&emsp;安装完成后，选择Anaconda Navigator 打开，接下来选择Environments -&gt;create，:生成如下界面：<br><img src="https://img-blog.csdnimg.cn/2019122022253567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里是3.7版本的问题，创建新环境并不会出现其他python版本，还需要配置其他信息，这里不再赘述，使用清华镜像安装后如下，即为正确完成安装：<br><img src="https://img-blog.csdnimg.cn/2019122022312263.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来开始搭建环境，给环境声明一个Name，这里叫做tensorflowWork。packages选择python3.6。</p><h4 id="第一步，总结"><a href="#第一步，总结" class="headerlink" title="第一步，总结"></a>第一步，总结</h4><p>anaconda里的默认root其实就是可以直接使用的，但是为了便于后面操作进行以及使用理解才添加新的环境。无论是方法一的安装在默认环境下，还是方法二安装在anaconda环境下，这两者并不冲突，只不过是运行程序时，是想用哪一个作为编译环境罢了。就像你要到一个地方去，修了两条路，这两条路都能到达，你要运行这个程序你可以走这条路，也可以走那条，他们相互独立并不会相互影响。而导包相当于你想走这一条路，但是这一条路有点窄，你的代码走不过去，为了能够让你的代码过去，你需要给这个路拓宽，这个包就是扩宽的材料，对应的代码对应对应的包。<br>&nbsp;</p><h2 id="第二步，安装pycharm"><a href="#第二步，安装pycharm" class="headerlink" title="第二步，安装pycharm"></a>第二步，安装pycharm</h2><p>这个在<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm官网</a>上下载即可,如图示安装即可。 <img src="https://img-blog.csdnimg.cn/20191221095541168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="pycharm_1"><br><img src="https://img-blog.csdnimg.cn/20191221095624451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="pycharm_2"><img src="https://img-blog.csdnimg.cn/2019122316264677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191221095701293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="pycharm_3"><br>安装完成。</p><h2 id="第三步，安装必需包"><a href="#第三步，安装必需包" class="headerlink" title="第三步，安装必需包"></a>第三步，安装必需包</h2><p>这里安装的是tensorflow和opencv，pil包，不一定全部用到，因为这里推荐的几个环境各有不同，所以全部安装上，其他包通过pycharm 中的【ALT+SHIFT+ENTER】即可安装，如还有缺失请自行百度。</p><h4 id="方法一：直装python环境"><a href="#方法一：直装python环境" class="headerlink" title="方法一：直装python环境"></a>方法一：直装python环境</h4><p>默认环境下只需进入cmd界面，输入命令即可，若是安装直装python环境又安装tensorflow的，则需进入cmd输入python：<br>若为下图：第二行中出现anaconda。则需修改默认python环境。<img src="https://img-blog.csdnimg.cn/20191221211939424.png" alt="在这里插入图片描述"><br>若为下图，第二行中不是anaconda，则继续操作即可。<img src="https://img-blog.csdnimg.cn/20191221213513434.png" alt="在这里插入图片描述"></p><h4 id="3-1-1-安装tensorflow包"><a href="#3-1-1-安装tensorflow包" class="headerlink" title="3.1.1 安装tensorflow包"></a>3.1.1 安装tensorflow包</h4><p>tensorflow可以在系统CPU和GPU上执行，AVX2和CUDA两种，这里推荐在github：<a href="https://github.com/fo40225/tensorflow-windows-wheel" target="_blank" rel="noopener">https://github.com/fo40225/t与ensorflow-windows-wheel</a>上下载，对于不同版本的python环境有不同的whl文件可以下载。<a href="https://github.com/fo40225/tensorflow-windows-wheel/raw/master/1.4.0/py36/CPU/avx2/tensorflow-1.4.0-cp36-cp36m-win_amd64.whl" target="_blank" rel="noopener">https://github.com/fo40225/tensorflow-windows-wheel/raw/master/1.4.0/py36/CPU/avx2/tensorflow-1.4.0-cp36-cp36m-win_amd64.whl</a><br>下载完成后，找到下载位置点击界面，按住shift右击鼠标右键，选择在此处打开Powershell窗口。<img src="https://img-blog.csdnimg.cn/20191221184310679.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="PowerShell"><br> 输入    ：</p><pre><code> pip install .\tensorflow-1.4.0-cp36-cp36m-win_amd64.whl</code></pre><p><img src="https://img-blog.csdnimg.cn/20191221185322803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行完即可，若是提示pip版本有更新，更不更新都可。<br>    python -m pip install –upgrade pip</p><h4 id="3-1-2-安装opencv包"><a href="#3-1-2-安装opencv包" class="headerlink" title="3.1.2 安装opencv包"></a>3.1.2 安装opencv包</h4><p>opencv在代码中使用时：<code>import cv2</code><br>opencv较tensorflow简单，只需输入代码即可运行：</p><pre><code>pip install opencv-python</code></pre><p><img src="https://img-blog.csdnimg.cn/20191221191736729.png" alt="opencv"></p><h4 id="3-1-2-安装PIL（Python-Imaging-Library）包"><a href="#3-1-2-安装PIL（Python-Imaging-Library）包" class="headerlink" title="3.1.2 安装PIL（Python Imaging Library）包"></a>3.1.2 安装PIL（Python Imaging Library）包</h4><p>PIL安装并不是通过直接键入pip install PIL 而是通过：        </p><pre><code>pip install pillow</code></pre><p><img src="https://img-blog.csdnimg.cn/20191221193010925.png" alt="在这里插入图片描述"></p><h4 id="方法一总结："><a href="#方法一总结：" class="headerlink" title="方法一总结："></a>方法一总结：</h4><p>这里使用的Powershell窗口和cmd界面使用方法相同，此处命令在cmd执行亦可。<br>&nbsp;</p><h4 id="方法二：anaconda环境"><a href="#方法二：anaconda环境" class="headerlink" title="方法二：anaconda环境"></a>方法二：anaconda环境</h4><p>这里使用之前第一步在anaconda下搭建的Name为tensorflowWork环境，这三者方法一致，这里只举tensorflow的例，opencv和PIL步骤相同。<img src="https://img-blog.csdnimg.cn/20191221235217581.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击上方的选择框设置为all，然后进行搜索tensorflw<img src="https://img-blog.csdnimg.cn/20191221235345841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择tensorflow，点击apply<br><img src="https://img-blog.csdnimg.cn/20191222000202665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>会生成一系列的包名，apply即可。随后进行安装，等待完成。其余各包同样操作，这里不赘述了。</p><h2 id="第四步，建立风格迁移工程"><a href="#第四步，建立风格迁移工程" class="headerlink" title="第四步，建立风格迁移工程"></a>第四步，建立风格迁移工程</h2><p>在pycharm中选择：file-&gt;New project <img src="https://img-blog.csdnimg.cn/20191221210833416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="NewProject"><br>这里要注意的是Base interpreter ，一般默认的是系统下的默认python，即直装的方法下默认为直装的那一个，若是装了anaconda环境则需选择默认环境，就是之前要选择另一条路的问题。</p><h4 id="方法一：在创建项目是直接选择anaconda下的python："><a href="#方法一：在创建项目是直接选择anaconda下的python：" class="headerlink" title="方法一：在创建项目是直接选择anaconda下的python："></a>方法一：在创建项目是直接选择anaconda下的python：</h4><p><img src="https://img-blog.csdnimg.cn/20191222004253634.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="方法二：在项目创建完成后再选择路径为：File-gt-Settings-gt-project：项目名，如图点击齿轮——Add。"><a href="#方法二：在项目创建完成后再选择路径为：File-gt-Settings-gt-project：项目名，如图点击齿轮——Add。" class="headerlink" title="方法二：在项目创建完成后再选择路径为：File-&gt;Settings-&gt;project：项目名，如图点击齿轮——Add。"></a>方法二：在项目创建完成后再选择路径为：File-&gt;Settings-&gt;project：项目名，如图点击齿轮——Add。</h4><p><img src="https://img-blog.csdnimg.cn/20191222003319372.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在Base interpreter下选择anaconda中python路径即可。<br><img src="https://img-blog.csdnimg.cn/20191222003949287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此所有环境配置完毕。  </p><h2 id="第五步，写风格迁移代码"><a href="#第五步，写风格迁移代码" class="headerlink" title="第五步，写风格迁移代码"></a>第五步，写风格迁移代码</h2><p>这里主要参网址的为<a href="http://zh.gluon.ai/chapter_computer-vision/neural-style.html" target="_blank" rel="noopener">http://zh.gluon.ai/chapter_computer-vision/neural-style.html</a>会在下一篇博客<a href="https://blog.csdn.net/weixin_41108515/article/details/103650964" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41108515/article/details/103650964</a>里详细解释过程。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 风格迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——豆瓣读书数据抓取——RE（正则表达式）</title>
      <link href="/2018/06/09/wang-luo-pa-chong-dou-ban-du-shu-shu-ju-zhua-qu-re-zheng-ze-biao-da-shi/"/>
      <url>/2018/06/09/wang-luo-pa-chong-dou-ban-du-shu-shu-ju-zhua-qu-re-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——豆瓣读书数据抓取——RE（正则表达式）"><a href="#网络爬虫——豆瓣读书数据抓取——RE（正则表达式）" class="headerlink" title="网络爬虫——豆瓣读书数据抓取——RE（正则表达式）"></a>网络爬虫——豆瓣读书数据抓取——RE（正则表达式）</h2><p>目标网址：<a href="https://book.douban.com/" target="_blank" rel="noopener">https://book.douban.com/</a></p><p>目标数据：（1）书名（2）书的链接地址（3）作者（4）发行时间（5）出版社<br><img src="https://img-blog.csdnimg.cn/20200413214442366.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>分析网页结构，通过获取网页源代码，使用re库解析网页结构，完成豆瓣读书项目中目标数据的爬取。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import requestsimport redef getcode(url):    url = url    headers = {        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3756.400 QQBrowser/10.5.4039.400'    }    response = requests.get(url,headers=headers)    response.encoding = 'utf_8'    code = response.text    return codedef parse_page(code):    ulist = []    pattern = re.compile('<div class="cover">.*?<a href="(.*?)" title="(.*?)">.*?<div class="author">(.*?)</div>.*?<span class="year">(.*?)</span>.*?<span class="publisher">(.*?)</span>',re.S)    items = re.findall(pattern,code)# print(items)    for item in items:        ulist.append([item[1],item[0].strip(),item[2].strip(),item[3].strip(),item[4].strip()])    return (ulist)def main():    ulist = []    url = "https://book.douban.com/"    code = getcode(url)    ulist = parse_page(code)    print(len(ulist))    print()    for i in range(len(ulist)):        print(ulist[i])main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：<br><img src="https://img-blog.csdnimg.cn/20200413220242245.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE（正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫——猫眼电影数据抓取——RE（正则表达式）</title>
      <link href="/2018/05/29/wang-luo-pa-chong-mao-yan-dian-ying-shu-ju-zhua-qu-re-zheng-ze-biao-da-shi/"/>
      <url>/2018/05/29/wang-luo-pa-chong-mao-yan-dian-ying-shu-ju-zhua-qu-re-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫——猫眼电影数据抓取——RE（正则表达式）"><a href="#网络爬虫——猫眼电影数据抓取——RE（正则表达式）" class="headerlink" title="网络爬虫——猫眼电影数据抓取——RE（正则表达式）"></a>网络爬虫——猫眼电影数据抓取——RE（正则表达式）</h2><p>猫眼电影榜单网址：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>目标数据描述：<br>（1）排名 （2）电影名称 （3）主演 （4）上映时间  （5）评分<br><img src="https://img-blog.csdnimg.cn/20200413213540934.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>任务要求</p><p>（1）使用requests库实现该网站网页源代码的获取；</p><p>（2）使用正则表达式对获取的源代码进行解析，并成功找到目标数据所在的特定标签，进行网页结构的解析；</p><p>（3）定义函数，将获取的目标数据打印输出，有能力的同学可以试着将结果写入文件中。</p><p>（4）使用框架式结构，通过参数传递实现整个特定数据的爬取。</p><p>可以使用生成器，将目标数据获取后放到字典中返回，同时，注意观察分页时url的变化，以便获取整个的排行榜数据。建议通过for循环传递变化参数实现。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsfrom requests.exceptions import RequestExceptionimport reimport timedef get_one_page(url):    try:        headers={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'}        response=requests.get("https://maoyan.com/board/4",headers = headers)        if response.status_code == 200:                 return response.text        return None    except RequestException:        return Nonedef parse_one_page(html):    pattern= re.compile('<dd>.*?board-index.*?>(\d+)</i>.*?data-src="(.*?)".*?name"><a' + '.*?>(.*?)</a>.*?star">(.*?)</p>.*?releasetime">(.*?)</p>' + '.*?integer">(.*?)</i>.*?fraction">(.*?)</i>.*?</dd>',re.S)    items = re.findall(pattern,html)    for item in items:        yield{            'index': item[0],            'image': item[1],            'title': item[2],            'actor': item[3].strip()[3:],            'time': item[4].strip()[5:],            'score': item[5] + item[6]        }def write_to_file(content):    with open('result.txt', 'a' , encoding='utf-8') as f:       f.write(json.dumps(content, ensure_ascii=False) + '\n')def main(offset):    url = 'https://maoyan.com/board/4'    html=get_one_page(url)    for item in parse_one_page(html):        print(item)        write_to_file(item)if __name__ == '__main__':    for i in range(10):         main(offset=i * 10)         time.sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下<br><img src="https://img-blog.csdnimg.cn/20200413213845848.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTEwODUxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE（正则表达式） </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
